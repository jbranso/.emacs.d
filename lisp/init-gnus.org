* Gnus Quick Start

   Gnus is designed to be a newsreader, and /not/ an email client. It is a bit different from your typical email client, but if you give Gnus a try and stick with it, it will really be worth it.

 This quick start guide will help you set up gnus to manage one gmail account.

** Telling Gnus who you are

#+BEGIN_SRC emacs-lisp :tangle no
(setq
 user-mail-address	"joe@gmail.com"
 user-full-name	"Joe Rogan")
#+END_SRC

** Define your gmail connection

   Most email clients use IMAP.  IMAP is an email protocol that stores all of your email on the server and not on your local machine.  This can save you some disk space.  You just need to tell Gnus where your imap server is.

   #+BEGIN_SRC emacs-lisp :tangle no
     (setq gnus-select-method
        '(nnimap "gmail"
   	      (nnimap-address "imap.gmail.com")))
   #+END_SRC

** Starting Gnus for the first time

   =M-x Gnus=

   After Gnus loads you should see a mostly empty screen. This is your group buffer.  It displays all of your groups, which a normal email client would call folders. Gnus doesn't show you for email folders, because you need to tell Gnus which folders to use by default.  Press the =^=.

You are now in the server buffer.  The server buffer shows you all of your email accounts and how you interact with each server.  If you use gnus with 5 different email accounts, then you will see 5 different servers.  Press RET on your email server.  If you are using gmail, your server will have gmail in the name.

Now you should see your email folders or /groups/.  To subscribe to a /group/ press "u".  You should probably subscribe to your Inbox, Sent, Trash, and Draft folders.  When you are done subscribing to /groups/ (folders), press =q=.

** Some more information

read these pages:
https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org
http://www.mostlymaths.net/2010/12/emacs-30-day-challenge-glimpse-of-bbdb.html
http://www.mostlymaths.net/2010/12/emacs-30-day-challenge-using-gnus-to.html
set up gnus to use Purdue IMAP
practical gnus tutorial
http://blog.binchen.org/posts/notes-on-using-gnus.html#sec-1
http://sachachua.com/blog/2008/05/emacs-gnus-searching-mail/
using mime in gnus http://orgmode.org/worg/org-contrib/org-mime.html
When you first start gnus you need to type "t".  Not sure why, but you do.
You also need to type j (jump) to a particular folder
also sometimes your inboxes won't sure up (if they are contain no unread mail mail) so
to see all inbex

(setq smtpmail-smtp-service 587
      gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")
Put the following in your ~/.authinfo file, replacing <USER> with your email address and replacing <PASSWORD> with your password—or your application-specific password:

When sending your first email from gnus, you might get a STARTTLS error. If you’re using homebrew in Mac OS X, you can install the necessary package with brew install gnutls.

You can find more information in the following sections.

* Setting up Gnus
  :PROPERTIES:
  :ID:       6e745af2-398f-49a2-a695-59e0c979bd9e
  :END:

  Let's tell gnus who we are.
  init-gnus-secret looks like:

(setq
   user-mail-address	"<your email address>"
   user-full-name	"<Your Full Name>")

   I hope you don't mind that I'm not telling you my email address.  I'd rather that not be public info.

   This files just sets up some variables that I use later on.
  #+BEGIN_SRC emacs-lisp
    (require 'gnus)
    ;; (setq path  "~/.emacs.d/lisp/init-gnus-secret.org")

    (let ((path "~/.emacs.d/lisp/init-gnus-secret.org"))
      (when
          (f-exists? path)
        (org-babel-load-file path)))
  #+END_SRC

** Posting Styles
Changing my signature based on what email account I'm using.

Posting an article is the same thing as sending an email, since gnus is a usenet reader, gnus uses usenet terminology.

I can specify posting styles depending on the account.  So for example I can specify that when I reply to an article (email), I should use a specific From field.  That's what this next bit of code does.

   #+BEGIN_SRC emacs-lisp :tangle no
     (setq gnus-posting-styles
           '(
             ;; My default hotmail posting style
             (.*
              (signature "some Cool Signature")
              (address "someHotmailAccount@hotmail.com"))
             ;; when I post to purdue stuff
             (".*Some-string-that-matche-your-server.*"
              (signature "Some Cool Signature\nThis is on a new line")
              (address "someEmailAccount@gmail.com"))
             ))

   #+END_SRC

** Making Gnus prettier
   :PROPERTIES:
   :ID:       cda56b7e-e071-4dd1-9619-fe7a317d70c0
   :END:
   My default summary line format
   #+BEGIN_SRC emacs-lisp
     (setq  gnus-summary-line-format "%d %U%R%z%I%(%[%4L: %-23,23f%]%) %s \n")
   #+END_SRC




   more attractive summary buffer
   http://groups.google.com/group/gnu.emacs.gnus/browse_thread/thread/a673a74356e7141f
   #+BEGIN_SRC emacs-lisp
   (when window-system
       (setq gnus-sum-thread-tree-indent "  ")
       (setq gnus-sum-thread-tree-root "● ")
       (setq gnus-sum-thread-tree-false-root "◯ ")
       (setq gnus-sum-thread-tree-single-indent "◎ ")
       (setq gnus-sum-thread-tree-vertical        "│")
       (setq gnus-sum-thread-tree-leaf-with-other "├─► ")
       (setq gnus-sum-thread-tree-single-leaf     "╰─► "))

       (setq gnus-summary-line-format
           (concat
            "%0{%U%R%z%}"
            "%3{│%}" "%1{%d%}" "%3{│%}" ;; date
            "  "
            "%4{%-20,20f%}"               ;; name
            "  "
            "%3{│%}"
            " "
            "%1{%B%}"
            "%s\n"))

     (setq gnus-summary-display-arrow t)

   #+END_SRC

** Make gnus startup faster
   :PROPERTIES:
   :ID:       65e0d067-88fe-4eb0-bfce-5d21c72411f7
   :END:
   These two variables make gnus not check for any new newsgroups and stops gnus from trying to filter out
   outdated newsgroups.  After you've opened up gnus a couple of times, you don't need gnus to do these things.
   But you can always subscribe to new groups by pressing "U" in the group buffer.

   #+BEGIN_SRC emacs-lisp
     (setq gnus-check-new-newsgroups nil
           gnus-check-bogus-newsgroups nil)
   #+END_SRC
*** Don't change gnu-read-active-file
 setting the next line to nil will slow down gnus apparently [[info:gnus#The%20Active%20File][info:gnus#The Active File]]
 So don't do this in your gnus set up.
 (setq gnus-read-active-file nil)

*** Fixing the Summary Buffer
    :PROPERTIES:
    :ID:       6c98f225-5cbc-424b-a32f-69e899d41327
    :END:
    There's no need to recenter the summary buffer all the time.  It only slows gnus down.
    #+BEGIN_SRC emacs-lisp
      (setq gnus-auto-center-summary nil)
    #+END_SRC

    Let's enter the summary buffer faster eh?
    #+BEGIN_SRC emacs-lisp
      (setq gnus-nov-is-evil nil
            gnus-show-threads nil
            gnus-use-cross-reference nil)
    #+END_SRC
** COMMENT Encrypting Email

   Here follows a short rant:

   Most email that you send, gets sent to a MUA, or mail user agent, which then sends it to another MUA, which gets read by the
   recipent of your email.  HOWEVER, when one MUA sends an email to another MUA, that message is usually send in *plain text*.  So
   when you send an email ANYONE can read it. /ANYONE/.  To fix this, you have two options, you can encrypt your email yourself,
   or have some big server (that you don't own) do it for you.  I'm all for encrypting it myself.  If you are going to do this,
   I'd reccommend you read up on using gpg or Gnu Privacy Guard.  It is the best free/libre encrypting software.


 # default encryption and signing of stuff
 # https://www.gnu.org/software/emacs/manual/html_node/gnus/Security.html#Security
*** sign and encrypt messages
    [[info:gnus#Signing%20and%20encrypting][info:gnus#Signing and encrypting]]

    Let's go ahead and sign and encrypt messages if I recognize the senders by default
    #+BEGIN_SRC emacs-lisp
      (setq mm-verify-option 'known
       mm-decrypt-option 'known)
    #+END_SRC

*** On reply encrypt my email
    Let's reply and encrypt/sign messages if you know the user by default and if that message is encrypted
    https://www.gnu.org/software/emacs/manual/html_node/gnus/Security.html#Security
    #+BEGIN_SRC emacs-lisp
      (setq gnus-message-replysign t
       gnus-message-replyencrypt t)
    #+END_SRC

** checking for new news
   :PROPERTIES:
   :ID:       15477e66-390a-4de9-955c-6290ce8937e5
   :END:
I got this code from John Wigley's .emacs

I'm not sure if this function will tell you if you have new news.
I'm also pretty sure that it won't flash an awesome popup window to tell you you have new news.
#+BEGIN_SRC emacs-lisp
  (defun gnus-demon-scan-news ()
    (interactive)
    (when gnus-plugged
      (let ((win (current-window-configuration))
            (gnus-read-active-file nil)
            (gnus-check-new-newsgroups nil)
            (gnus-verbose 2)
            (gnus-verbose-backends 5))
        (unwind-protect
            (save-window-excursion
              (when (gnus-alive-p)
                (with-current-buffer gnus-group-buffer
                  (gnus-group-get-new-news gnus-activate-level))))
          (set-window-configuration win)))))

  ;;
  ;;
  ;; (with-eval-after-load 'gnus
  ;;   (gnus-demon-add-handler 'gnus-demon-scan-news-2 5 2))
#+END_SRC

** Managing Spam
   :PROPERTIES:
   :ID:       c4f65821-d059-4f6d-ac7a-407e227e1bed
   :END:
   Gnus comes with som enice spamming features
   #+BEGIN_SRC emacs-lisp
     (setq spam-blacklist "/home/joshua/.emacs.d/lisp/blacklist"
           spam-use-blacklist t)
     (spam-initialize)
   #+END_SRC

** Searching in Gnus
   :PROPERTIES:
   :ID:       63ae4bc7-3e9b-4add-a364-db36ec2975e5
   :END:
   set up search in GNUS
   http://www.emacswiki.org/emacs/GnusGmail#toc21
   #+BEGIN_SRC emacs-lisp
     (use-package nnir)
   #+END_SRC

** Kill mail buffer after you send an email
   :PROPERTIES:
   :ID:       d7cbe98a-4be8-4ffb-87d8-ce8d62302ae2
   :END:

   Message mode is rather silly in that it does not kill the send message buffer after you send an email.  It's silly to still see
   the sent buffer after you've sent it, so this fixes that.  After you send a message, the sent buffer disappears.

#+BEGIN_SRC emacs-lisp
(setq message-kill-buffer-on-exit t)
#+END_SRC

** Setting up your email Account

Tell gnus to use my purdue email, and to enable searching my inbox typing GG in the buffer group, lets me search the current group
for a string you have to hit "t" when you first open gnus to get purdue working again uncomment this whole thing

   (setq gnus-select-method
      '(nnimap "imap.gmail.com"
	      ;; (nnimap-address "imap.gmail.com")  ; it could also be imap.googlemail.com if that's your server.
	       (nnimap-server-port "993")
	       (nnimap-stream ssl)
           (nnir-search-engine imap)
           ))

   The variable smtpmail-stream-type controls what form of connection the SMTP library uses. The default value is nil, which
   means to use a plain connection, but try to switch to a STARTTLS encrypted connection if the server supports it. Other
   possible values are: starttls to insist on STARTTLS; ssl to use TLS/SSL; and plain for encryption.

   (setq smtpmail-smtp-server "smtp.gmail.com"
      ;; smtpmail-default-smtp-server "smtp.gmail.com"
      send-mail-function (quote smtpmail-send-it)
      smtpmail-stream-type 'ssl
      smtpmail-smtp-service 465
      )

** Sending email
   :PROPERTIES:
   :ID:       f95e0dd4-7f74-403b-a1e4-ca2a14bb05e5
   :END:
   #+BEGIN_SRC emacs-lisp
   ;; (require 'init-gnus-secret-smtp)
   ;; I am trying to use use-package so that emacs won't start on an error if someone tries to clone
   ;; my config
;;   (use-package init-gnus-secret-smtp)
   #+END_SRC

  init-gnus-secret-smtp looks like
  (require 'smtpmail)
  (setq message-send-mail-function 'smtpmail-send-it
      smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
      smtpmail-auth-credentials '(("smtp.gmail.com" 587 "<your gmail address>" nil))
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587)

  (setq user-mail-address "<your gmail address>")
  (setq send-mail-function 'smtpmail-send-it)

   Apparently this will spell check my messages before I send them, which is quite nice.

   I used to have this set to mail-send-hook, but that apparently is just not the right thing to do,
   because I get this error if that is what I have set:

   Warning (mail): The default mail mode is now Message mode.
   You have the following Mail mode variable customized:

   mail-send-hook

   To use Mail mode, set `mail-user-agent' to sendmail-user-agent.
   To disable this warning, set `compose-mail-user-agent-warnings' to nil.
   Warning (mail): The default mail mode is now Message mode.
   You have the following Mail mode variable customized:

   mail-send-hook

   To use Mail mode, set `mail-user-agent' to sendmail-user-agent.
   To disable this warning, set `compose-mail-user-agent-warnings' to nil.


   I've used this is the past, but with html-mail, it doesn't work very well.

   (add-hook 'message-send-hook  'ispell-message)

** Asynchronous Email

   This might not be worth it. Make gnus load more than 1 email in the background. This seems to slow stuff down in the initial
   connection, and it doesn't seem all that fast once everything is opened.


   (setq
   gnus-asynchronous t
   ;; fetch 15 messages by default
   gnus-use-article-prefetch 15)
** COMMENT Notification on new Mail
   Have gnus alert you when a new mail arrives.
   #+BEGIN_SRC emacs-lisp
     (use-package gnus-desktop-notify
       :ensure t)
   #+END_SRC

   This is supposed to let me know when I get a new email, but it's not working.
   http://www.thregr.org/~wavexx/software/gnus-desktop-notify.el/index.html
   #+BEGIN_SRC emacs-lisp
     (gnus-desktop-notify-mode)
     (gnus-demon-add-scanmail)
     ;;(gnus-demon-init)
     ;;(gnus-demon-add-handler 'gnus-group-get-new-news 20 t)
   #+END_SRC

   ;;alledigeely this next line is not necessary
   ;;(gnus-demon-init)

** Setting up Gnus to work with bbdb
   :PROPERTIES:
   :ID:       a6305580-2518-4fb1-ba39-b685694516f3
   :END:

   get bbdb set up (insidious big brother database) it manages your mail contacts
   http://bbdb.sourceforge.net/bbdb.html#SEC13
   When you are about to email someone you can easily start typing their name then press tab
   to try to complete the email address

   Now you should be ready to go.  Say ‘M-x bbdb RET RET’ to open
   a bbdb buffer showing all entries.  Say ‘c’ to create a new
   entry, ‘b’ to search your BBDB and ‘C-o’ to add a new field to an
   entry.  If you want to add a sender to the BBDB you can also just
   hit ‘:’ on the posting in the summary buffer and you are done.
   When you now compose a new mail, hit ‘TAB’ to cycle through know
   recipients.

   #+BEGIN_SRC emacs-lisp
     (use-package bbdb :ensure t)
   #+END_SRC

    These are are needed to initial bbdb for gnus and message mode
    #+BEGIN_SRC emacs-lisp
      (bbdb-initialize 'gnus 'message )
    #+END_SRC

    http://www.mostlymaths.net/2010/12/emacs-30-day-challenge-glimpse-of-bbdb.html
   Use bbdb when you read a message and when you send a message.  Though I should probably only store someone's email address
   when I send an email.
   #+BEGIN_SRC emacs-lisp
     (require 'bbdb)
     (bbdb-initialize 'gnus 'message)
   #+END_SRC

   Use bbdb in message mode.  This lets you begin to type out someone's name and then tab to complete their email address.
   #+BEGIN_SRC emacs-lisp
     (bbdb-insinuate-message)
   #+END_SRC

   Initialize bbdb for gnus.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
   #+END_SRC

   ;; [[info:gnus#FAQ%205-7][info:gnus#FAQ 5-7]]  how to use bbdb with gnus
   #+BEGIN_SRC emacs-lisp
   (setq bbdb/gnus-summary-prefer-real-names t
      bbdb-file "~/.emacs.d/bbdb"
      bbdb-default-area-code 765
      bbdb-user-mail-names "bransoj@hotmail.com")
   #+END_SRC

   Don't set the variable bbdb/news-auto-create-p to t.  It creates bbdb records for all email that you read. BUT you might on
   occasion be fooded into reading junk mail.

   Make bbdb pop up when you are using it in gnus. It'll pop up when you are sending an email.  This is to let you know that
   gnus is saving a new record of that email address. Also make bbdb-save records without asking, because this is really nice.

   #+BEGIN_SRC emacs-lisp
     (setq
      bbdb-use-pop-up t
      bbdb-offer-save 1
      bbdb-update-records-p t)
   #+END_SRC

   Gnus will recognize these email addresses as mine.

   #+BEGIN_SRC emacs-lisp
   (setq
     bbdb-user-mail-address-re
     (regexp-opt
      '("bransoj@hotmail.com" "jbranso@purdue.edu" ))
     message-dont-reply-to-names bbdb-user-mail-address-re
     gnus-ignored-from-addresses bbdb-user-mail-address-re)
   #+END_SRC

   I'm not sure what this does.

   #+BEGIN_SRC emacs-lisp
   (bbdb-mua-auto-update-init 'message)
   #+END_SRC

** ranking groups
   :PROPERTIES:
   :ID:       5e527dc8-9d1a-427c-a529-fd88fe080194
   :END:

   Make Gnus sort the group buffer based on how often I read each group.  When you exit the summary buffer, increase the score of that group.  This makes that group a little bit more important.

   #+BEGIN_SRC emacs-lisp
   (add-hook 'gnus-summary-exit-hook 'gnus-summary-bubble-group)
   #+END_SRC

** displaying your topics when you enter gnus
   :PROPERTIES:
   :ID:       8264d472-e08d-4b10-95bc-0fee75c37a76
   :END:

   #+BEGIN_SRC emacs-lisp
       (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
   #+END_SRC

** COMMENT splitting up my inboxes

   This just creates topics but doesn't seem to support splitting of groups

     (eval-after-load 'gnus-topic
       '(progn
          (setq gnus-message-archive-group '((format-time-string "sent.%Y")))
          (setq gnus-topic-topology '(("Gnus" visible)
                                      (("misc" visible))
                                      (("hotmail" visible nil nil))
                                      (("gmail" visible nil nil))))

          (setq gnus-topic-alist '(("Accrisoft Support")
                                   ("Basecamp")
                                   ("Arch")
                                   ("bug-hurd")
                                   ("hotmail" ; the key of topic
                                    "nnimap+hotmail:Inbox"
                                    "nnimap+hotmail:Drafts"
                                    "nnimap+hotmail:Sent")
                                   ("gmail" ; the key of topic
                                    "INBOX"
                                    "[Gmail]/Sent Mail"
                                    "Drafts")
                                   ("misc"  ; the key of topic
                                    "nnfolder+archive:sent.2015-12"
                                    "nnfolder+archive:sent.2016"
                                    "nndraft:drafts")
                                   ("Gnus")))))

I used to have this say nnmail-split methods, but I'm not using the nnmail backend!  I'm using nnimap.  Maybe this will actually let gnus properly split my mail into proper topics.

   #+BEGIN_SRC emacs-lisp
     ;;(setq nnimap-split-method-default)
     (setq nnmail-split-methods
           '(
           ("Accrisoft Support" "^From:.*support@accrisoft.com.*$")
             ("Basecamp" "^From:.*notifications@basecamp.com.*$")
             ("arch" "^To:.*arch-general@archlinux.org.*$")
             ("emacs devel" "^To:.*emacs-devel@gnu.org.*$")
             ("emacs devel" "^CC:.*emacs-devel@gnu.org.*$")
             ("bug-hurd" "^To:.*bug-hurd@gnu.org.*$")
             ("emacs bugs" "^CC:.*@debbugs.gnu.org.*$")
             ("bug-hurd" "^Cc:.*bug-hurd@gnu.org.*$")))

   #+END_SRC

           (setf nnmail-resplit-incoming t)

           (setf nnmail-crosspost nil)

** Posting Styles aka change your "From" based on what you reply to
   :PROPERTIES:
   :ID:       7d6e5688-8ee6-43da-94ba-a5e55ac78f2f
   :END:
[[info:gnus#Posting%20Styles][info:gnus#Posting Styles]]

This is quite complicated...

BUT basically, if I have a bunch of email accounts, It would be nice that when I reply or post new articles (email), than Gnus will change the From automatically.  This method will definitely work for posting articles, but will to work when replying to articles?

#+BEGIN_SRC emacs-lisp
  (add-hook 'kill-emacs-hook #'(lambda ()
                                 (interactive)
                                 (when (get-buffer "*Group*")
                                   (gnus-group-exit))))
#+END_SRC

** read html mail
   :PROPERTIES:
   :ID:       4150a9e8-5bcf-474c-ade4-cec758e7f427
   :END:

   You have 2 main options here.  You can use the elisp shr for this or you can use gnus-w3m if you have w3m installed.
   Shr is written in elisp.  w3m is written in C or C++.  So I'm guessing that w3m is faster.  So I'm going to use gnus-w3m.

   I'm assuming that w3m is faster than the built in shr which is used by eww.

   I can also use w3m, which uses the emacs-w3m, but I'm not sure how updated that is.

   I've decided that I like the default 'shr.  the w3m is really annoying to try to use.

   and 3wm has not seen much updates in the past couple of years.
   #+BEGIN_SRC emacs-lisp
   ;;(use-package w3m :ensure t)
   ;;(setq mm-text-html-renderer 'w3m)
   (setq mm-text-html-renderer 'shr)
   #+END_SRC

** Delete mail immediately after it has been marked expired
   :PROPERTIES:
   :ID:       60caba9f-04ef-470c-9da9-40108bfd53b7
   :END:

   #+BEGIN_SRC emacs-lisp
   (setq nnmail-expiry-wait 'immediate)
   #+END_SRC
** deleting boring headers from email
   :PROPERTIES:
   :ID:       48255cfb-8300-4800-8c14-16c5a3525ac4
   :END:
   [[info:gnus#Hiding%20Headers][info:gnus#Hiding Headers]]
   #+BEGIN_SRC emacs-lisp
     (setq gnus-treat-hide-boring-headers 'head)

   #+END_SRC
** automatically configuring how my mail looks
   :PROPERTIES:
   :ID:       c4c986ea-5d81-49c0-9a1c-0d4049337525
   :END:

   The following variables can have the following values:
   - nil   (don't do this treatment)
   - t     (do this treatment on all parts of the message)
   - head  (do this treatment on the headers of the message)
   - first (do this treatment on the first body part)
   - last  (do this on the last body part)

     #+BEGIN_SRC emacs-lisp
     (setq gnus-treat-strip-multiple-blank-lines t)
     (setq gnus-treat-trailing-blank-lines t)
     ;; let's see some smiles in gnus
     (setq gnus-treat-display-smileys t)
     (setq gnus-treat-emphasize 'head)
     #+END_SRC
** using gnus automatic scoring stuff
   :PROPERTIES:
   :ID:       3992d090-c903-4fb3-a078-a3d2dc2203b3
   :END:

   Make gnus rank which articles are important to you.
   #+BEGIN_SRC emacs-lisp
     (setq gnus-use-adaptive-scoring t)
   #+END_SRC
** close gnus when you exit emacs.
   :PROPERTIES:
   :ID:       77120fe8-73f3-4b60-9ed5-055854429a5c
   :END:
That way gnus exits properly, and you don't have to read the active file when you open gnus again.

#+BEGIN_SRC emacs-lisp
  (add-hook 'kill-emacs-hook #'(lambda ()
                                 (interactive)
                                 (when (get-buffer "*Group*")
                                   (gnus-group-exit))))
#+END_SRC
** Provide init-gnus
   :PROPERTIES:
   :ID:       2d4021b8-caa2-43fd-9652-e9df2340f70e
   :END:
   #+BEGIN_SRC emacs-lisp
     (provide 'init-gnus)
   #+END_SRC
