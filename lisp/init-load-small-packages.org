#+AUTHOR:Joshua Branson
#+LATEX_HEADER: \usepackage{lmodern}
#+LATEX_HEADER: \usepackage[QX]{fontenc}
#+STARTUP: overview

This file just loads in tiny packages that don't really need to be in separate files.
* lexical binding
:PROPERTIES:
:ID:       15a3435c-73db-412c-adcb-58483e9cffb5
:END:
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
#+END_SRC
* Autorevert
:PROPERTIES:
:ID:       5361bf81-5d82-4e45-8534-fadd8e575b76
:END:
If a file has changed on disk, then automatically revert the buffer and don't complain about it
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode 1)
#+END_SRC

Be quiet about reverting files.

#+BEGIN_SRC emacs-lisp
  (setq auto-revert-verbose nil)
#+END_SRC

This apparently also updates dired buffers too.
#+BEGIN_SRC emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
#+END_SRC

* Parenthesis
*** Show matching parens
:PROPERTIES:
:ID:       46d36ead-f555-4a6f-abcf-201ece93a489
:END:
 Show matching parens
 #+BEGIN_SRC emacs-lisp
 (add-hook 'after-init-hook 'show-paren-mode)
 ;;(show-paren-mode 1)
 #+END_SRC
*** Electric pair mode
:PROPERTIES:
:ID:       1672d05c-1f83-48b0-a5d8-c9f838c1a954
:END:
 When you type an open parenthsis, electric pair mode types the second one for you, leaving point between them.
  #+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'electric-pair-mode)
  ;;(electric-pair-mode t)
 #+END_SRC
* Emacs's default query-replace sucks.  Let's use anzu!
:PROPERTIES:
:ID:       b93b547a-2b97-4896-af4b-e6f4c783457e
:END:
Anzu is amazing!  It highlight the words that you wish to replace.
#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :ensure t
    :diminish anzu-mode
    :config (global-anzu-mode 1)
    :defer t)

;;(add-hook 'after-init-hook 'global-anzu-mode)
#+END_SRC

* visual line mode
:PROPERTIES:
:ID:       c65ee7c6-61e4-46a5-b09f-70ff12cc14eb
:END:

Filling is what one does to insert actual or invisible newlines at a really long sentence to make a paragraph.
For example:

This is a really long sentence, but when you call fill paragraph on it, with point inside it, it might look something like this:

This is a really long sentence,
but when you call fill paragraph
on it, with point inside it, it
might look something like this:

Emacs by default does not automatically call fill paragraph for you.  Instead, it shows your visual characters to show you that your text is too big for the buffer.   It looks like this:

#+BEGIN_SRC org
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi bibendum elit sodales ↵
  sapien porta, ut aliquet orci volutpat. Nulla non est vel ante pulvinar elementum eu ac  ↵
  neque. Aliquam dapibus ipsum vulputate varius faucibus. Proin finibus rhoncus diam in ↵
  interdum. Nullam a elit auctor felis eleifend rutrum. Fusce odio quam, vehicula vitae ↵
  ullamcorper sit amet, consectetur ac elit. Nunc at rutrum risus, quis ullamcorper risus. ↵
#+END_SRC

Global visual line mode, will automatically remove those arrows and make it looks like this:

#+BEGIN_SRC org
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi bibendum elit sodales
  sapien porta, ut aliquet orci volutpat. Nulla non est vel ante pulvinar elementum eu ac
  neque. Aliquam dapibus ipsum vulputate varius faucibus. Proin finibus rhoncus diam in
  interdum. Nullam a elit auctor felis eleifend rutrum. Fusce odio quam, vehicula vitae
  ullamcorper sit amet, consectetur ac elit. Nunc at rutrum risus, quis ullamcorper risus.
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-visual-line-mode)
  (global-set-key (kbd "C-c q") #'fill-paragraph)
#+END_SRC
* markdown
:PROPERTIES:
:ID:       4f12892e-8b3b-4b1e-b606-0be712f28f5b
:END:
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.mdwn\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC
* testing out ivy
  (use-package ivy :ensure t
:config
(setq ivy-height 30))

(use-package counsel :ensure t)

* avy-mode
:PROPERTIES:
:ID:       b0fe4e52-38b9-4846-b737-7ac2b025527f
:END:
 I use avy mode for avy jump to char, which is a little nicer than ace-jump mode, but not by much.

 #+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :defer t
  :config
  (setq avybackground t
   avy-highlight-first t)
  ;; https://github.com/abo-abo/avy
  ;; What does that do?
  (setq avy-keys (number-sequence ?e ?t )))
 #+END_SRC

* c-mode
  :PROPERTIES:
  :ID:       55ba0f1d-1032-412c-a974-2a2c81990858
  :END:
Open .defs files in c-mode.  These are found in the Hurd source code.
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.defs?\\'" . c-mode))
#+END_SRC

* which-key
:PROPERTIES:
:ID:       6dd77f41-e39f-4c24-a2af-f46a6bd59398
:END:
This package is like guide-key, but better.  As you start to type a keychord, but then forget how to finish it,
which-key will bring up a small buffer to show you possible completions.

#+CAPTION: Which key displays the current major mode's keybindings
#+NAME:   fig:which-key
[[~/.emacs.d/images/which-key.png]]

#+BEGIN_SRC emacs-lisp
  (use-package which-key :ensure t :config (which-key-mode))
#+END_SRC

* enable flyspell for all program modes.
:PROPERTIES:
:ID:       bca2e633-d8eb-4d29-a059-8f2d6f18eb57
:END:

This will highlight words that are misspelled.  Flyspell-prog-mode will do this for programming, flyspell-mode is for text files.

[[~/.emacs.d/images/flyspell.png]]

Also flyspell binds C-c $ to flyspell fix word before point.  BUT I used to prefer that to be bound to endless/ispell-word-then-abbrev.
BUT my hacky autocorrect functionality doesn't work well.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook (lambda ()
                              (flyspell-prog-mode)))
                              ;;(unbind-key (kbd "C-c $") flyspell-mode-map)
                              ;;(global-set-key (kbd "C-c $") #'endless/ispell-word-then-abbrev))

  ;; enable flyspell mode for all of my text modes.  This will enable flyspell to underline misspelled words.
  (add-hook 'text-mode-hook (lambda ()
                              (flyspell-mode)))

  ;;(unbind-key (kbd "C-c $") flyspell-mode-map)
  ;;(global-set-key (kbd "C-c $") #'endless/ispell-word-then-abbrev))

#+END_SRC

Oddly enough web-mode doesn't seem to support flyspell.

#+BEGIN_SRC emacs-lisp :tangle no
;; (add-hook 'web-mode-hook 'flyspell-mode)
;; (add-hook 'web-mode-hook 'flyspell-prog-mode)
#+END_SRC

* aggressive indent
:PROPERTIES:
:ID:       97237f5e-8877-4168-8d77-264c1e46cd13
:END:

Aggressive indent attempts to aggressively indent you code after you change various aspects of it.  It doesn't work well with org-mode and web-mode.

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent :ensure t
    :defer t
    :config
    (add-to-list 'aggressive-indent-excluded-modes 'web-mode)
    (add-to-list 'aggressive-indent-excluded-modes 'org-mode))
    (aggressive-indent-mode 1)
    ;;(add-hook 'after-init-hook 'global-aggressive-indent-mode)
;;    (add-hook 'prog-mode-hook #'aggressive-indent-mode)
#+END_SRC


:PROPERTIES:
:ID:       9d7b0209-dda3-4155-aef7-0e3dbdc5398e
:END:

Async uses another Emacs to async-ously execute emacs lisp code.

#+BEGIN_SRC emacs-lisp
(use-package async
  :ensure t
  :defer t
  ;;:config
  ;; enable async compilation of melpa packages
  ;;(async-bytecomp-package-mode 1)
)
#+END_SRC

Here is an example of what you can do with async.
#+BEGIN_SRC emacs-lisp :tangle no
(async-start
   ;; What to do in the child process
   (lambda ()
     (message "This is a test")
     (sleep-for 3)
     222)

   ;; What to do when it finishes
   (lambda (result)
     (message "Async process done, result should be 222: %s" result)))
#+END_SRC

* Projectile
:PROPERTIES:
:ID:       24fce274-7aa4-4de9-b2a0-f2c7b4783b2e
:END:
Projectile is a package that attempts to make it easier for Emacs to do various commands that are specific to your repositories.

#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile :ensure t :defer t)
  (use-package projectile :diminish projectile-mode
    :config
    (setq projectile-enable-caching t)
    (eval-after-load 'projectile-mode 'helm-projectile-on)
    (setq projectile-completion-system 'helm)
    (projectile-global-mode)
    :ensure t)

  ;;(add-hook 'after-init-hook #'projectile-global-mode)
  #+END_SRC
* vc-mode
:PROPERTIES:
:ID:       642acc9e-8521-4bfe-8fd0-6d30bc323e4d
:END:
 This shows you in the fringes of the buffer (this is the left column on the left side of your buffer)
 whick text in a buffer has not yet been committed.

 [[~/.emacs.d/images/vc-diff.png]]

 #+BEGIN_SRC emacs-lisp
   (use-package diff-hl :defer t :ensure t)
   (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
   (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)
 #+END_SRC

* auth-source
:PROPERTIES:
:ID:       90ce5dc0-d72b-4263-a0c6-14cc88a5838c
:END:
If I have a .authinfo, .authinfo.gpg, or .netrc, then load auth-source.el

How to use auth-source and gpg to encrypt files.  Also how to transfer keys between machines.
https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources

Auth-source.el, lets you save your various logins and password for different servers in one file.  For someone like me, who has never gotten ssh keys to work (it always ALWAYS ANNOYING prompts me for a password), I just have my information stored in .authinfo.gpg, which is an encrypted file.

Ensure that you have f.el
#+BEGIN_SRC emacs-lisp
(use-package f :ensure t)
(require 'f)
#+END_SRC


According to Mastering Emacs blog...gpg is an outdated (ancient) version of gpg.  gpg2 is newer and should be used!

gpg is the version more suited for servers.  Gpg2 is the version more suited for desktop use.   Here is a [[http://superuser.com/questions/655246/are-gnupg-1-and-gnupg-2-compatible-with-each-other/655250#655250][stackoverflow answer.]] describing the difference between gpg and gpg2.


At the moment I dual boot Parabola GNU/Linux and GuixSD.  At some point, I want to migrate over to use GuixSD, but Parabola has some features, services, and packages that Guix lacks.  So until that time, I'll have to use both.  BUT the good news is that I can tell Emacs which gpg binary to use based upon my host name.  If my host name is "antelope" the default GuixSD host-name then make the egp-gpg-program be gpg.  If it's parabola, make it "gpg2".
"parabola" uses gpg2.  GuixSD needs to use gpg.
#+BEGIN_SRC emacs-lisp
  (cond
   ((string-equal system-name "antelope")
    (setq epg-gpg-program "gpg"))
   ((string-equal system-name "parabola")
    (setq epg-gpg-program "gpg2"))
   ((string-equal system-name "GuixSD")
    (setq epg-gpg-program "gpg")))
#+END_SRC

#+RESULTS:
: gpg2

#+BEGIN_SRC emacs-lisp
(setq epg-gpg-program "gpg")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (when (and (display-graphic-p) (f-file? "~/.authinfo.gpg"))
    ;; only use the encrypted file.
    (setq auth-sources '("~/.authinfo.gpg"))
    ;;(require 'auth-source)
    )
#+END_SRC
* Golden ratio mode
:PROPERTIES:
:ID:       a56ac24d-7ddb-4b6c-8ad1-9b817e4a73fe
:END:
https://github.com/roman/golden-ratio.el
#+BEGIN_SRC emacs-lisp
    (use-package golden-ratio
    :defer t
    :ensure t
    ;;let's not use golden ratio on various modes
    :config (setq golden-ratio-exclude-modes
                    '( "sr-mode" "ediff-mode" "ediff-meta-mode" "ediff-set-merge-mode" "gnus-summary-mode"
                       "magit-status-mode" "magit-popup-mode" "org-export-stack-mode"))
                       (golden-ratio-mode)

                       :diminish golden-ratio-mode)
  ;;  (add-hook 'after-init-hook 'golden-ratio-mode)
  #+END_SRC

I had to find the source code for turning off golden-ratio-mode.  Because
~(golden-ratio-mode nil)~ does not turn off golden-ratio-mode.
#+BEGIN_SRC emacs-lisp
  (defun my-ediff-turn-off-golden-ratio ()
    "This function turns off golden ratio mode, when I
  enter ediff."
    (interactive)
    (remove-hook 'window-configuration-change-hook 'golden-ratio)
    (remove-hook 'post-command-hook 'golden-ratio--post-command-hook)
    (remove-hook 'mouse-leave-buffer-hook 'golden-ratio--mouse-leave-buffer-hook)
    (ad-deactivate 'other-window)
    (ad-deactivate 'pop-to-buffer))

#+END_SRC

Let's turn off golden-ratio-mode when I am using ediff, and turn it back on
when I quit ediff.

#+BEGIN_SRC emacs-lisp
  (add-hook 'ediff-mode-hook #'my-ediff-turn-off-golden-ratio)

  (add-hook 'ediff-quit-merge-hook #'golden-ratio)
#+END_SRC

* force emacs to use utf8 in all possible situations
:PROPERTIES:
:ID:       2aafacc4-bc8a-4683-a1d3-63cce3f72f84
:END:
 https://thraxys.wordpress.com/2016/01/13/utf-8-in-emacs-everywhere-forever/
 #+BEGIN_SRC emacs-lisp
   (setq locale-coding-system 'utf-8)
   (set-terminal-coding-system 'utf-8)
   (set-keyboard-coding-system 'utf-8)
   (set-selection-coding-system 'utf-8)
   (prefer-coding-system 'utf-8)
   (when (display-graphic-p)
      (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
 #+END_SRC
* recent
:PROPERTIES:
:ID:       0a6a1dca-1f12-4b1d-afd3-70d427d695ec
:END:
#+BEGIN_SRC emacs-lisp
  (defun my-recentf-startup ()
  "My configuration for recentf."
  (recentf-mode 1)
  (setq recentf-max-saved-items 1000
        recentf-exclude '("/tmp/"
              "^.*autoloads.*$"
              "^.*TAGS.*$"
              "^.*COMMIT.*$"
              "^.*pacnew.*$"
                          ;; in case I ever want to exclude shh files, I can add this next line.
                          ;;  "/ssh:"
              ))

  (add-to-list 'recentf-keep "^.*php$//")
  (recentf-auto-cleanup))
  (add-hook 'after-init-hook 'my-recentf-startup)
#+END_SRC
* ag
:PROPERTIES:
:ID:       6f4c9bad-cf74-43b6-b87c-39e781ae0961
:END:
#+BEGIN_SRC emacs-lisp
(setq-default grep-highlight-matches t
              grep-scroll-output t)
;; ag is the silver searcher.  It lets you search for stuff crazy fast
(when (executable-find "ag")
  (use-package ag :defer t :ensure t)
  (use-package wgrep-ag :defer t :ensure t)
  (setq-default ag-highlight-search t))
#+END_SRC
* eshell
:PROPERTIES:
:ID:       4f6ec06a-4f1b-44c6-ac5f-b0804649b90b
:END:

First, Emacs doesn't handle less well, so use cat instead for the shell pager:
#+BEGIN_SRC emacs-lisp
(setenv "PAGER" "cat")
#+END_SRC

using ac-source-filename IS super useful
it is only activated if you start to type a file like
 "./", "../", or "~/" but then it's awesome!

#+BEGIN_SRC emacs-lisp
(add-hook 'eshell-mode-hook '(lambda ()
                              (setq shell-aliases-file "~/.emacs.d/alias")))
#+END_SRC
* smart comment
   :PROPERTIES:
   :ID:       a5a5f993-e0a8-48c5-b80f-ccab9781591e
   :END:

   With point in the or beginning middle of the line comment out the whole line
   with point at the end of the line, add a comment to the left of the line
   with a region marked, marked the region for delition with "C-u C-c"
   delete the marked regions and lines with "C-u C-u C-c"
   #+BEGIN_SRC emacs-lisp
     (use-package smart-comment
       :ensure t
       :bind ("C-c ;" . smart-comment)
       :config
       (with-eval-after-load 'org
         (local-unset-key "C-c ;")))
   #+END_SRC
* COMMENT Wttrin
:PROPERTIES:
:ID:       764c4eb4-fc8f-497d-89af-ad8db03e0f75
:END:
Wtrin is a small emacs package that gets you the local weather forcast.  It pulls from http://wttr.in/.

[[~/.emacs.d/images/weather.png]]

#+BEGIN_SRC emacs-lisp
(use-package wttrin
  :ensure t
  :commands (wttrin)
  :init
  (setq wttrin-default-cities
  '("West Lafayette"))
  (setq wttrin-default-accept-language '("Accept-Language" . "en-US")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun weather ()
    "Show the local weather via wttrin"
    (interactive)
    (wttrin))
#+END_SRC
* global-prettify-symbols-mode
:PROPERTIES:
:ID:       9aa51c7a-fd2c-4984-88d7-f54f702a3a1d
:END:
Make "-->" look like --> and ">=" look >= cool utf-8 characters.

Add some more characters cool characters.  You can get some cool ideas from [[https://ekaschalk.github.io/post/prettify-mode/][prettymode]]
The characters end up looking like:

[[~/.emacs.d/images/pretty-mode.png]]
#+BEGIN_SRC emacs-lisp
  (defun my/add-extra-prettify-symbols ()
    (global-prettify-symbols-mode 1)
    (mapc (lambda (pair) (push pair prettify-symbols-alist))
          '(
            (">=" . ?≥)
            ("<=" . ?≤)
            ("\\geq" . ?≥)
            ("\\leq" . ?≤)
            ("\\neg" . ?¬)
            ("\\rightarrow" . ?→)
            ("\\leftarrow" . ?←)
            ("\\infty" . ?∞)
            ("-->" . ?→)
            ("<--" . ?←)
            ("\\exists" . ?∃)
            ("\\nexists" . ?∄)
            ("\\forall" . ?∀)
            ("\\or" . ?∨)
            ("\\and" . ?∧)
            (":)" . ?☺)
            ("):" . ?☹)
            (":D" . ?☺)
            ("\\checkmark" . ?✓)
            ("\\check" . ?✓)
            ("1/4" . ?¼)
            ("1/2" . ?½)
            ("3/4" . ?¾)
            ("1/7" . ?⅐)
            ;; ⅕ ⅖ ⅗ ⅘ ⅙ ⅚ ⅛ ⅜ ⅝ ⅞
            ("ae" . ?æ)
            ("^_^" . ?☻)
            ("function" .?ϝ)
            )))
  (add-hook 'after-init-hook 'my/add-extra-prettify-symbols)
#+END_SRC

* suggest
:PROPERTIES:
:ID:       93090d59-9fb2-43ca-aff8-f9a3f58a27dd
:END:
This is a program that lets suggests valid elisp functions to use. It is SO cool!

[[~/.emacs.d/images/suggest.png]]


You can read more [[http://www.wilfred.me.uk/blog/2016/07/30/example-driven-development/][here]].

#+BEGIN_SRC emacs-lisp
(use-package suggest :ensure t :defer t)
#+END_SRC
* uniquify
:PROPERTIES:
:ID:       96509ae1-422f-4821-9939-6c5eae7d740e
:END:
 Nicer naming of buffers for files with identical names
 Instead of Makefile<1> and Makefile<2>, it will be
 Makefile | tmp  Makefile | lisp
 this file is part of gnus emacs.  I don't need to use use-package
 #+BEGIN_SRC emacs-lisp
(require 'uniquify)

(setq uniquify-buffer-name-style 'reverse)
(setq uniquify-separator " • ")
(setq uniquify-after-kill-buffer-p t)
(setq uniquify-ignore-buffers-re "^\\*")
 #+END_SRC
* all the icons
:PROPERTIES:
:ID:       19d20513-a02a-42fc-91b2-76f7c32df062
:END:
You can learn more about [[https://github.com/domtronn/all-the-icons.el][all the icons]] here.

[[~/.emacs.d/images/all-the-icons.png]]

You need the icons for this to work dummy.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons :ensure t :defer t)
(use-package all-the-icons-dired :ensure t :defer)
#+END_SRC

* dired
  :PROPERTIES:
  :ID:       425e59a0-c254-44df-b50b-d008d5258df8
  :END:

Dired is the Emacs file manager.  It looks like this:

[[~/.emacs.d/images/dired.png]]

It lets you rename files, run massive search and replace commands, compress files, etc.

Enable async dired commands.
#+BEGIN_SRC emacs-lisp
  (after-load 'dired
    (autoload 'dired-async-mode "dired-async.el" nil t)
    (dired-async-mode 1))
#+END_SRC
** Dired+
:PROPERTIES:
:ID:       0460cdf9-b11d-4411-82cc-9aaf74d24621
:END:
#+BEGIN_SRC emacs-lisp
(use-package dired+ :ensure t)
#+END_SRC

** COMMENT dired-icon
https://www.topbug.net/dired-icon/
#+BEGIN_SRC emacs-lisp
(use-package dired-icon :ensure t)
(add-hook 'dired-mode-hook 'dired-icon-mode)
#+END_SRC

** COMMENT dired rsync
But it doesn't seem to work ???
I found this code snippet here:
https://truongtx.me/2013/04/02/emacs-async-file-copying-in-dired-using-rsync
#+BEGIN_SRC emacs-lisp
(defun tmtxt/dired-rsync (dest)
  (interactive
   ;; offer dwim target as the suggestion
   (list (expand-file-name (read-file-name "Rsync to:" (dired-dwim-target-directory)))))
  ;; store all selected files into "files" list
  (let ((files (dired-get-marked-files nil current-prefix-arg)))
	;; the rsync command
	(setq tmtxt/rsync-command "rsync -arvz --progress ")
	;; add all selected file names as arguments to the rsync command
    (dolist (file files)
	  (setq tmtxt/rsync-command
			(concat tmtxt/rsync-command
					(shell-quote-argument file)
					" ")))
	;; append the destination
	(setq tmtxt/rsync-command
		  (concat tmtxt/rsync-command
				  (shell-quote-argument dest)))
	;; run the async shell command
	(async-shell-command tmtxt/rsync-command "*rsync*")
	;; finally, switch to that window
	(other-window 1)))
;;; bind it to C-c C-r
(define-key dired-mode-map (kbd "C-c C-r") 'tmtxt/dired-rsync)
#+END_SRC
** COMMENT Dired sort
:PROPERTIES:
:ID:       2adfc507-73e7-46c5-9cea-35d84a0917fa
:END:
press "S" in a dired buffer to see dired sort in action
#+BEGIN_SRC emacs-lisp
(use-package dired-sort :ensure t)
#+END_SRC

** Dired details
:PROPERTIES:
:ID:       3b1694dd-ea8d-4f8a-b24e-5d16f1cdd07a
:END:

http://whattheemacsd.com/setup-dired.el-01.html
I don't need dired to automatically show me all the details ie: all the permissions and stuff
If I do want the details I can use ")" to show them and "(" to hide them again
#+BEGIN_SRC emacs-lisp
(use-package dired-details :ensure t
  :config
  (setq-default dired-details-hidden-string "--- "))
#+END_SRC

** dired
:PROPERTIES:
:ID:       b316742c-74f3-4393-82a1-c51860523e7c
:END:

#+BEGIN_SRC emacs-lisp
(use-package dired
  ;; before loading dired, set these variables
  :init (setq-default diredp-hide-details-initially-flag nil
                      dired-dwim-target t
                      ;;omit boring auto save files in dired views
                      dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$")
  :config ;; after loading dired, do this stuff
  (load "dired-x")
  :bind
  (:map dired-mode-map
        ("/" . helm-swoop)
        ([mouse2] . dired-find-file)))

(with-eval-after-load 'dired
  (add-hook 'dired-mode-hook 'dired-omit-mode)
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC

*** Ediff two marked files
:PROPERTIES:
:ID:       05dc8ce4-1d7e-411e-be77-924078a92ed0
:END:

#+BEGIN_SRC emacs-lisp
(defun ora-ediff-files ()
  (interactive)
  (let ((files (dired-get-marked-files))
        (wnd (current-window-configuration)))
    (if (<= (length files) 2)
        (let ((file1 (car files))
              (file2 (if (cdr files)
                         (cadr files)
                       (read-file-name
                        "file: "
                        (dired-dwim-target-directory)))))
          (if (file-newer-than-file-p file1 file2)
              (ediff-files file2 file1)
            (ediff-files file1 file2))
          (add-hook 'ediff-after-quit-hook-internal
                    (lambda ()
                      (setq ediff-after-quit-hook-internal nil)
                      (set-window-configuration wnd))))
      (error "no more than 2 files should be marked"))))

(define-key dired-mode-map "e" 'ora-ediff-files)
#+END_SRC
* yasnippet
** Set up yasnippet.
:PROPERTIES:
:ID:       20eb3ae4-97e1-4356-a54f-78af87b4647b
:END:
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
  :defer t
  :ensure t
  :init
  (add-to-list 'load-path "~/.emacs.d/snippets")
  ;; (define-key company-mode-map (kbd "TAB") #'yas-expand)

  ;; (define-key company-mode-map (kbd "<tab>") #'yas-expand)
  :config (yas-global-mode 1))
  ;; (add-hook 'after-init-hook 'yas-global-mode)
  #+END_SRC

If I modify a buffer via a yasnippet with a back-ticks like ~`SOME ELISP CODE `~, then yasnippet will issue a warning.  Let's tell yasnippet to ignore that.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'warnings
    (add-to-list 'warning-suppress-types '(yasnippet backquote-change)))
#+END_SRC
** COMMENT using yasnippet with evil-mode

This advises yasnippet, so that when I expand a snippet, I change to insert state and leave in insert state.

But it is probably not necessary.  When I am about to expand a snippet, I am typically in insert state anyway.
#+BEGIN_SRC emacs-lisp
  (when evil-mode
    (advice-add 'evil-insert-state :before 'yas-expand)
    (advice-add 'evil-insert-state :after 'yas-expand))

#+END_SRC
* nov mode
:PROPERTIES:
:ID:       0eed7f37-c991-4795-ba26-ba477afdaab2
:END:

This mode lets you read epub documents inside Emacs.  How cool is that?

#+BEGIN_SRC emacs-lisp
  (use-package nov :ensure t
    :mode ("\\.epub\\'" . nov-mode))
#+END_SRC

* company mode
** download company mode
:PROPERTIES:
:ID:       8ed6b2f0-bcf6-4bcb-9960-8128383be671
:END:

Company mode has bound tab to complete the common part between two snippets.  I'd rather have tab mean select the first snippet. I'm getting some of the code from this gist: https://gist.github.com/nonsequitur/265010

#+BEGIN_SRC emacs-lisp
(use-package company :ensure t
  :config
  (setq company-idle-delay .2)
  (define-key company-active-map "\C-n" #'company-select-next)
  (define-key company-active-map "\C-p" #'company-select-previous)
  (define-key company-active-map (kbd "<tab>") #'company-complete-selection)
  (global-company-mode 1))

  ;;(add-hook 'after-init-hook 'global-company-mode)
  #+END_SRC

** show yasnippets in company mode
:PROPERTIES:
:ID:       f9dba9a6-e011-48cb-8a14-6a365fe78c1c
:END:

#+BEGIN_SRC emacs-lisp
(dolist (hook '(prog-mode-hook
                text-mode-hook
                org-mode-hook))
  (add-hook hook
            (lambda ()
              (set (make-local-variable 'company-backends)
                   '((company-dabbrev-code company-yasnippet))))))
#+END_SRC
* flycheck
:PROPERTIES:
:ID:       f6a02ab5-420e-4dc8-a8c2-7ae8e1e0acce
:END:

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-pos-tip :ensure t :defer t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package flycheck-status-emoji :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package flycheck-color-mode-line :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :defer t
  :ensure t
  :config
  (flycheck-color-mode-line-mode)
  (flycheck-pos-tip-mode)
  (flycheck-status-emoji-mode)
  (global-flycheck-mode
  ))

  ;; (add-hook 'after-init-hook 'global-flycheck-mode)
  #+END_SRC
* lua
:PROPERTIES:
:ID:       d9846cc0-b907-4703-98e9-1fc189a6dca5
:END:
#+BEGIN_SRC emacs-lisp
(use-package lua-mode :ensure t
    :mode ("\\.lua\\'" . lua-mode))
#+END_SRC
* git
** magit
:PROPERTIES:
:ID:       8e5f5d56-7cf6-41b1-bc62-24f0e6cd488f
:END:
Ido-ubiquitous is needed for completing magit via ido, but when I use it, other things start using ido, when I prefer helm.
#+BEGIN_SRC emacs-lisp
;; (use-package ido-ubiquitous :ensure t)

(use-package magit :defer t :ensure t)
;;(use-package git-blame :ensure t :defer t)
#+END_SRC

;; (use-package git-commit-mode
;;   :defer t
;;   :ensure t
;;   :disabled t
;;   :config
;;   (add-hook 'git-commit-mode-hook 'goto-address-mode)
;;   (after-load 'session
;;     (add-to-list 'session-mode-disable-list 'git-commit-mode))
;;   )
;; this package can't be found either
;;(use-package git-rebase-mode :defer t :ensure t)

#+BEGIN_SRC emacs-lisp
  (use-package fullframe :ensure t :defer t)
  (after-load 'magit (fullframe magit-status magit-mode-quit-window))
#+END_SRC

In ediff mode, open up org-files in showall.  That way you don't have to tab open things.
#+BEGIN_SRC emacs-lisp
(add-hook 'ediff-prepare-buffer-hook #'outline-show-all)
#+END_SRC

I also don't really need scroll-bar-mode enabled with ediff, but I can't get scroll-bar-mode to turn back on.
#+BEGIN_SRC emacs-lisp
  (add-hook 'ediff-load-hook #'(lambda () (scroll-bar-mode -1)))
  (add-hook 'ediff-suspend-hook #'scroll-bar-mode)
  (add-hook 'ediff-quit-hook #'scroll-bar-mode)
#+END_SRC


When we start working on git-backed files, use git-wip if available.  This auto saves git files in a wip in progress branch on the current progress.  You can learn more here: https://magit.vc/manual/2.1/magit/Wip-Modes.html

#+BEGIN_SRC emacs-lisp :tangle no
(after-load 'magit
   (global-magit-wip-save-mode)
   (diminish 'magit-wip-save-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(after-load 'magit (diminish 'magit-auto-revert-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq-default
 magit-save-some-buffers nil
 magit-diff-refine-hunk t)
#+END_SRC

If a command takes longer than 5 seconds, pop up the process buffer.
#+BEGIN_SRC emacs-lisp
 (setq magit-process-popup-time 15)
#+END_SRC

** gitignore major mode
:PROPERTIES:
:ID:       94749d5b-1577-4932-af4f-d6e786056cf6
:END:

Major mode for editing gitignore files

#+BEGIN_SRC emacs-lisp
(use-package gitignore-mode  :defer t :ensure t)
(use-package gitconfig-mode  :defer t :ensure t)
#+END_SRC

** git-timemachine
:PROPERTIES:
:ID:       938e9345-2a8b-4a70-b41e-b4a0c1186f7c
:END:
Though see also vc-annotate's "n" & "p" bindings
this package is soooo cool! you execute git-timemachine, you can then press p and n to go to the
previous and next verions. w copies the git hash of the current buffer, and q quits the buffer
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine :ensure t :defer t)
#+END_SRC


** git messenger
   :PROPERTIES:
   :ID:       372e6c67-514b-4e1e-8d25-9be2a30da22f
   :END:
Type this command on any line of a repo.  It'll tell you the commit when it appeared.
#+BEGIN_SRC emacs-lisp
(use-package git-messenger :defer t :ensure t)
(global-set-key (kbd "C-x v p") #'git-messenger:popup-message)
#+END_SRC
;; since I'm using helm-mode, magit will use helm-completion for stuff! awesome!
* css
:PROPERTIES:
:ID:       b88f1e6b-66f1-4209-b41e-19a06357db1c
:END:
Colourise CSS colour literals

[[~/.emacs.d/images/css-colorize.png]]
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode :ensure t :defer t)
  (dolist (hook '(css-mode-hook html-mode-hook sass-mode-hook))
    (add-hook hook 'rainbow-mode))
#+END_SRC

** COMMENT SASS and SCSS
#+BEGIN_SRC emacs-lisp
  (use-package sass-mode :ensure t :defer t)
  (use-package scss-mode :ensure t :defer t
    :config
    (setq-default scss-compile-at-save nil))
#+END_SRC

** COMMENT LESS
#+BEGIN_SRC emacs-lisp
(use-package less-css-mode :ensure t)
;; I don't think I've ever used skewer-mode.
;; (when (featurep 'js2-mode)
;;   (use-package skewer-less))
#+END_SRC

** Use eldoc for syntax hints
   :PROPERTIES:
   :ID:       2586b70f-d7c5-475a-bb56-2236aa453dae
   :END:
#+BEGIN_SRC emacs-lisp
  (use-package css-eldoc :ensure t :defer t)

  ;;(autoload 'turn-on-css-eldoc "css-eldoc")
  (add-hook 'css-mode-hook 'css-eldoc-enable)
#+END_SRC

** emmet mode
   :PROPERTIES:
   :ID:       2c0894d7-393a-45f2-a84c-c56acb03f837
   :END:
You should read more about css abbreviations with emmet mode!
https://github.com/smihica/emmet-mode#css-abbreviations
#+BEGIN_SRC emacs-lisp
(add-hook 'css-mode-hook 'emmet-mode) ;; enable Emmet's css abbreviation.
#+END_SRC
* better shell remote open
:PROPERTIES:
:ID:       0a0f0129-5e8f-40e7-a2fc-ae3c9b7f6622
:END:
#+BEGIN_SRC emacs-lisp
(use-package better-shell :ensure t :defer t)
#+END_SRC

better-shell-remote-open

* helm
:PROPERTIES:
:ID:       a077141f-fed4-4e16-92fb-5c31ae849737
:END:

Helm mode is an incremental completion framework, that is much better than ido-mode.
[[~/.emacs.d/images/helm-buffers-list.gif]]

Before we load any helm things, need to load helm-flx so it uses flx instead of helm's fuzzy matching.

#+BEGIN_SRC emacs-lisp
(use-package helm :ensure t :defer t)
(use-package helm-swoop :ensure t :defer t)
(use-package helm-flx :ensure t :defer t
  :init (helm-flx-mode +1))
#+END_SRC

According to the github repo this next line is all that I need to install helm

#+BEGIN_SRC emacs-lisp
  (defun my/config-helm-function ()
    "This just sets up helm."
    (require 'helm-config)
    (helm-mode 1)
    ;;(define-key helm-map (kbd "C-<return>") 'helm-execute-persistent-action)
    ;;(define-key helm-find-files-map (kbd "<tab>") 'helm-ff-RET)
    ;;(define-key helm-map (kbd "<backtab>") 'helm-select-action)
    (global-set-key (kbd "C-x r b") #'helm-bookmarks))

  (add-hook 'after-init-hook 'my/config-helm-function)
#+END_SRC

I've installed helm-ag, which might be cool.

#+BEGIN_SRC emacs-lisp
(setq
 ;;don't let helm swoop guess what you want to search... It is normally wrong and annoying.
 helm-swoop-pre-input-function #'(lambda () (interactive))
 ;; tell helm to use recentf-list to look for files instead of file-name-history
 helm-ff-file-name-history-use-recentf t
 ;; let helm show 2000 files in helm-find-files
 ;; since I let recent f store 2000 files
 helm-ff-history-max-length 1000
 ;; I've set helm's prefix key in init-editing utils
 ;; don't let helm index weird output files from converting .tex files to pdf for example
 helm-ff-skip-boring-files t
 ;;make helm use the full frame. not needed.
 ;; helm-full-frame t
 ;; enable fuzzy mating in M-x
 ;;helm-M-x-fuzzy-match t
 ;;helm-recentf-fuzzy-match t
 ;;helm-apropos-fuzzy-match t
;;the more of these sources that I have, the slower helm will be
 helm-for-files-preferred-list '(
                                 helm-source-buffers-list
                                 helm-source-recentf
                                 helm-source-bookmarks
                                 helm-source-file-cache
                                 helm-source-files-in-current-dir
                                 ;;helm-source-locate
                                 ;;helm-source-projectile-files-in-all-projects-list
                                 ;;helm-source-findutils
                                 ;;helm-source-files-in-all-dired
                                 ))
#+END_SRC

For whatever reason, helm is looking for files with "C-x f" and not "C-x C-f"

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-f") 'helm-find-files)
#+END_SRC


(define-key helm-find-files-map (kbd "C-f") 'helm-execute-persistent-action)
 the next command will add another C-j command for helm
(define-key helm-map (kbd "C-f") 'helm-execute-persistent-action)
 I am removing C-t which toggles where on the screen helm pops up when I do this next line
(define-key helm-map (kbd "C-t") 'helm-execute-persistent-action)
(define-key helm-map (kbd "s-t") 'helm-execute-persistent-action)
(define-key helm-top-map (kbd "C-k") 'helm-kill-this-unruly-process)
(define-key helm--minor-mode-map (kbd "C-f") 'helm-execute-persistent-action)
I should define some cool helm mini commands

 (global-set-key (kbd "C-c h")
                 (defhydra hydra-helm (:color pink)
                   "helm"
                   ("r" helm-resume)))
* z-present

Slides inside Emacs

#+BEGIN_SRC emacs-lisp
(use-package zpresent :ensure t :defer t)
#+END_SRC

Create an org-file and M-x turns the file into a presentation.  "n" is for next slide and "p" is for previous slide.

#+BEGIN_SRC org
  ,* First Slide
  Opening paragraph
  ,** Sub title 1
  Some more information on the first slide
  ,** sub title 2
  ,* Second Slide
  Opening paragraph
  ,** sub title 1
  More info
  ,** sub title 2
  Lots more info.
#+END_SRC

* ledger
:PROPERTIES:
:ID:       ddcf601b-75ac-46ce-ab16-c442158afdf6
:END:
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode :ensure t
    :mode
    ("\\.ledger?\\'" . ledger-mode))

#+END_SRC
* smart mode-line
:PROPERTIES:
:ID:       234a4918-8947-4e1c-85ed-77c0501fdcfb
:END:

Make the mode line look prettier

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line-powerline-theme :ensure t)
#+END_SRC

Smart mode line apparently is more active and works w/ just about anything

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line :ensure t
  :init
  (setq sml/theme 'powerline)
  ;; emacs keeps prompting me to run the smart-mode-line-theme.  This is a word around that I found on github
  (setq sml/no-confirm-load-theme t)
  (setq powerline-arrow-shape 'curve)
  (setq powerline-default-separator-dir '(right . left))
  (setq sml/mode-width 0)
  ;; this makes sure that the mode line doesn't go off the screen
  (setq sml/name-width 40)
  (sml/setup))
#+END_SRC

** emacs can play music and stream it! (when streaming works)
    #+BEGIN_SRC emacs-lisp
      (use-package emms :ensure t
        :defer t
        :config
        (require 'emms-setup)
        (emms-all)
        (emms-default-players))
    #+END_SRC

* linum
:PROPERTIES:
:ID:       6f74055f-5351-453f-90cf-491045428704
:END:
   display line numbers in the fringe on the left of the page.

   I'd love to globally enable linum mode, but it slows Emacs to a crawl on large org buffers.
   #+BEGIN_SRC emacs-lisp
     (dolist (hook '(
     c-mode-hook
     js2-mode-hook
     css-mode-hook
     php-mode-hook
     web-mode-hook
     emacs-lisp-mode-hook
     ))
       (progn
         (add-hook hook 'linum-mode)
         ;;(remove-hook hook 'linum-mode)
         ))

         #+END_SRC

   I'd prefer to use nlinum mode, because it's faster.  BUT it also makes it that I cannot open a new Emacs frame.
#+BEGIN_SRC emacs-lisp
;; (use-package nlinum :ensure t)

#+END_SRC
* debbugs

  If I want to look at Emacs bugs, I debbugs is useful for this.

  #+BEGIN_SRC emacs-lisp
  (use-package debbugs :ensure t :defer t)
  #+END_SRC

* COMMENT some things I don't use
** paradox
    Paradox adds some nice features to emacs install packages
    this sets up paradox to use my private token to access public repos.
    #+BEGIN_SRC emacs-lisp
    ;;(require 'init-paradox)
    #+END_SRC
** sunrise is a alternative to flotilla
    #+BEGIN_SRC emacs-lisp
;;    (require 'init-sunrise)
    #+END_SRC

** autocorrect
:PROPERTIES:
:ID:       ed63d49c-50d4-468a-9df2-8b578a823e90
:END:

#+BEGIN_SRC emacs-lisp :tangle no
;;(org-babel-load-file "/home/joshua/programming/emacs/autocorrect/autocorrect.org" )
#+END_SRC
** A register hydra
(reqgister)

;; Ieed to use (set-register register value)

"
regist is this:
Alisments (NAME . CONTENTS), one for each Emacs register.
NAMEaracter (a number).  CONTENTS is a string, number, marker, list
or areturned by `registerv-make'.

So m to register command must transform my NAME char into an ASCII number.  fun.
"

(defmber-to-register (number register)
  (ive "n number: \nMregister: ")
  ;;to-register number register)
  ;;r to use
  (ster register number))

;; g is getting soo annoying and it's not working at all
;;(pister-alist)

(defsert-register (register)
  (ive "Mregister: ")
  (pister)
  (igister register))

(defcrement-register ())   (get-register "r")

(defdra-register (:color pink :hint nil)
  "
^Sto                ^Insert^                       ^Increase^
^^^^----------------------------------------------------------------
_n_uregister        _i_nsert number register       _I_ncrease the register
C-u  C-x r n R
insebers left       C-x r i R                      C-u number C-x r + r
  ofle              Insert _t_ext to register
  C-                C-x r s R
"
  ;;
  ("mber-to-register :exit t)
  ("ngle-number-lines :exit t)

  ;;
  ("sert-register :exit t)          ; Show (expand) everything
  ("to-register :exit t)          ; Show (expand) everything

  ;;e
  ("crement-register  :exit t)    ; Hide everything but the top-level headings

  ("leave"))


;; I set this hydra to a keybinding.  So I don't have to remember all of the keybindings
(glokey (kbd "C-c C-r") 'hydra-register/body)
;; aother modes try to set C-c C-r to a keybinding.  I am overriding them.
(witfter-load 'org
  (dy org-mode-map (kbd "C-c C-r") 'hydra-register/body))
(witfter-load 'web-mode
  (dy web-mode-map (kbd "C-c C-r") 'hydra-register/body))
(witfter-load 'php-mode
  (dy php-mode-map (kbd "C-c C-r") 'hydra-register/body))
*** COMMENT rust
http://emacsist.com/10425
#+BEGIN_SRC emacs-lisp
;;(use-package rust :ensure t)
#+END_SRC
*** COMMENT autocorrect
:PROPERTIES:
:ID:       ed63d49c-50d4-468a-9df2-8b578a823e90
:END:

My hacky Emacs autocorrect functionality, is not the best.  It changes things that I don't want changed all the time, etc.

Until it's better, I don't want to use it

#+BEGIN_SRC emacs-lisp
;; (org-babel-load-file "/home/joshua/programming/emacs/autocorrect/autocorrect.org" )
#+END_SRC

*** abbrev-mode
:PROPERTIES:
:ID:       6c870f0d-d805-4e4c-b6d6-09233397e444
:END:
Add abbrev-mode to text modes and program modes to turn on autocorrect like functionality.
#+BEGIN_SRC emacs-lisp
(dolist (hook '(org-mode-hook
                prog-mode-hook
                text-mode-hook))
  (add-hook hook (lambda ()
                   (abbrev-mode 1)
                   (diminish 'abbrev-mode))))

#+END_SRC

*** logging the commands I use often.
    this will be cool to monitor my commands.
    But I have to initialize it...It will not record commands by default.
    I don't really use this functionality.  I never see what commands I'm using.  So I'll ignore it for now.
    (require-package 'mwe-log-commands)
    (me:log-keyboard-commands)
*** python mode

    (require 'init-python-mode)

*** github

    (require 'init-gitgub)

*** I don't know what this is
    http://alexott.net/en/writings/emacs-vcs/EmacsDarcs.html
    (require 'init-darcs)
*** stackexchange in emacs
    I also hardly ever use this sx package, which is an amazing package!
    searching stack exchange via emacs!  C-c S
    (use-package sx :ensure t)
*** downcase words like THe and BEautiful
     This is probably how I can embed yasnippets into various modes

    (require 'init-dubcaps)

*** I found this on the internet, but don't use it

     reduce the frequency of garbage collection by making it happen on
     each 50MB of allocated data (the default is on every 0.76MB)
     this might help improve performance
    ;;(setq gc-cons-threshold 50000000)

** bookmark
:PROPERTIES:
:ID:       7f780f9c-3c32-4ac7-b733-885d3651b0e7
:END:

(require 'bookmark)
(defhydra hydra-bookmark (:color pink :hint nil)
  "
^Edit^                   ^Jump^                    ^Set^
^^^^^^------------------------------------------------------
_e_: edit bookmarks     _j_ump to bookmark         _s_: set bookmark
_r_: rename             _J_ump to gnus bookmark    _S_: set a gnus bookmark
"
  ;; Edit
  ("e" edit-bookmarks :exit t)                ; Up
  ("r" helm-bookmark-rename :exit t)                ; Up

  ;; Jump
  ("j" bookmark-jump :exit t)          ; Show (expand) everything
  ("J" gnus-bookmark-jump :exit t)          ; Show (expand) everything

  ;; Set
  ("s" bookmark-set :exit t)    ; Hide everything but the top-level headings
  ("S" gnus-bookmark-set :exit t)    ; Hide everything but the top-level headings

  ("z" nil "leave"))

;; I want to set this hydra to a keybinding.  So I don't have to remember all of the keybindings
(global-set-key (kbd "C-c C-b") 'hydra-bookmark/body)
;; a ton of other modes try to set C-c C-b to a keybinding.  I am overriding them.
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-c C-b") 'hydra-bookmark/body))
(with-eval-after-load 'web-mode
  (define-key web-mode-map (kbd "C-c C-b") 'hydra-bookmark/body))
(with-eval-after-load 'php-mode
  (define-key php-mode-map (kbd "C-c C-b") 'hydra-bookmark/body))

** eldoc
Show eldoc popups in pos-tips.  I got the idea [[https://www.topbug.net/blog/2016/11/03/emacs-display-function-or-variable-information-near-point-cursor/][here]].
   (defun my-eldoc-display-message (format-string &rest args)
    "Display eldoc message near point."
    (when format-string
      (pos-tip-show (apply 'format format-string args))))
  (setq eldoc-message-function #'my-eldoc-display-message)
** (require 'init-term)
** page break line modes
:PROPERTIES:
:ID:       ce614852-2e6c-4c4d-9011-a478bc5e96f9
:END:
This turn ^L into nice long lines.

  (use-package page-break-lines
    :ensure t
    :diminish page-break-lines-mode
    :config (global-page-break-lines-mode))

* provide this file
:PROPERTIES:
:ID:       de5dc789-d53e-4932-87fc-844370a9b796
:END:
#+BEGIN_SRC emacs-lisp
  (provide 'init-load-small-packages)
#+END_SRC
