 #+TITLE: My Org Initialization
#+AUTHOR: Joshua Branson
#+PROPERTY: header-args :
# this says that org mode will export up to the 4th level heading
# +OPTIONS: H:4

Org-mode is Emacs' organizational mode, and it is amazing!  [[http://doc.norang.ca/org-mode.html][Here]] is an online example configuration that is a little more thorough than this configuration.

* COMMENT Org's 8.3 stable version

Org-mode has just updated to a stable version.  release notes are here: http://orgmode.org/Changes.html

Property drawers now have to be under a headline and its scheduling line.

Org-babel mode now supports sed!
* My org use-package declaration
:PROPERTIES:
:ID:       e5893542-ca4c-44b6-be5f-d6bcbe365f36
:END:
Make C-c SPC inside an org table mean clear that table section.  If you are outside of an org table, make it mean
just one space.

  #+BEGIN_SRC emacs-lisp
    (defun my-just-one-space ()
      (interactive)
      (if (org-at-table-p)
          (org-table-blank-field)
        (just-one-space)))

    (use-package org :bind (:map org-mode-map ("C-c SPC" . my-just-one-space))
      :ensure org-plus-contrib)
  #+END_SRC

  #+RESULTS:

* Setting up Org-plugins
** org-crypt
:PROPERTIES:
:ID:       c285b242-e60d-46c0-bd87-c10887f9448b
:END:
  Encrypting text under a heading in org [[info:org#org-crypt][info:org#org-crypt]] Any text below a headline that has a `:crypt:' tag will be automatically be encrypted when the file is saved.  If you want to use a different tag just customize the `org-crypt-tag-matcher' setting.
  So the following org heading would be encrypted

  #+BEGIN_SRC org
    ,* encrypted                                                                     :crypt:
      -----BEGIN PGP MESSAGE-----
      Version: GnuPG v2

      hQEMA8CBlfhZifrPAQgArs3jyd5tVD5v1XCeort5/iftb+xBhNZ2wM4qPtwSValY
      hO/dENekYvYl3SyiX9lhBVZM8C+a5aMhrvorHlzqJc5AX/YL2HK3T9liODFZp7Wi
      Z3ZDTSQUXdNRP7bcvBR5OdetPG5knLDLCyAbfGwWbmpT10m/oufsFZtOnbv+109q
      2ffMmA2e2b+GycFH8H3IvRUz4kUW712ONk9wEI4fHH/09RWp7ouNlSvhs5ZWn1hm
      p57IjIulducRe+ZBkeA3TPfIGtEzczoKQUbTD9uVgWQ5ZW0SRQgFpXBv4oamudf0
      N6XqZ1XI6jJycKG49GhHe+zkwD31cmRNfOx1bFWePNJKAZEtVJ/5uU+mUY3i786I
      Lnldc/ZU9oLqULVoZ6q2cufXI+7A1ghOVqeKTgT6UPFny6eww7hg/EKI3bsmhbCs
      8Sa1s2Yws8ral/s=
      =/leP
      -----END PGP MESSAGE-----
  #+END_SRC

To use org-crypt it is suggested that you have the following in your `.emacs':

  #+BEGIN_SRC emacs-lisp
    (use-package org-crypt
      :config
      (org-crypt-use-before-save-magic)
      (setq org-tags-exclude-from-inheritance (quote ("crypt"))))
  #+END_SRC

  I personally don't use org-crypt too much anymore. [fn:2]  It automatically encrypts the text you are working on when you save the file.  I find it is easier just to encrypt the entire file via M-x epa-encrypt-file.

  #+RESULTS:
  | crypt |

  GPG key to use for encryption
  Either the Key ID or set to nil to use symmetric encryption.
  This is my key for my email address.
  #+BEGIN_SRC emacs-lisp
     (setq org-crypt-key "C8FA3D82C7B1326F")
  #+END_SRC

  #+RESULTS:
  : E99C48112E969A17
  Auto-saving does not cooperate with org-crypt.el: so you need to turn it off if you plan to use org-crypt.el quite often.
  Otherwise, you'll get an (annoying) message each time you start Org.
  To turn it off only locally, you can insert this:
  # -*- buffer-auto-save-file-name: nil; -*-
  #+BEGIN_SRC emacs-lisp
    (setq auto-save-default nil)
  #+END_SRC

  #+RESULTS:

** org mime
:PROPERTIES:
:ID:       b1838e30-a287-48cd-8267-3b36a25a8115
:END:

  http://orgmode.org/worg/org-contrib/org-mime.html
  I want to figure out how to install this, because I could then write html emails trivially with gnus
  #+BEGIN_SRC emacs-lisp
  (use-package org-mime :ensure t)
  #+END_SRC

  #+RESULTS:
  : org-mime

   imported code from http://orgmode.org/worg/org-contrib/org-mime.html

  for those who use color themes with Dark backgrounds it is useful to set a dark background for all exported code blocks and example regions. This can be accomplished with the following:  And you should totally do this!  it looks SOO COOOL!
  #+BEGIN_SRC emacs-lisp
    ;; I'm having problems with this
    ;;(add-hook 'org-mime-html-hook
    ;;(lambda ()
    ;;(org-mime-change-element-style
    ;;"pre" (format "color: %s; background-color: %s; padding: 0.5em;"
    ;;"#E6E1DC" "#232323"))))
  #+END_SRC

  #+RESULTS:
  | lambda | nil | (org-mime-change-element-style pre (format color: %s; background-color: %s; padding: 0.5em; #E6E1DC #232323)) |

  the following can be used to nicely offset block quotes in email bodies
#+BEGIN_SRC emacs-lisp
  ;; I'm having problems with this
  ;;(add-hook 'org-mime-html-hook
  ;;(lambda ()
  ;;(org-mime-change-element-style
  ;;"blockquote" "border-left: 2px solid gray; padding-left: 4px;")))
#+END_SRC

#+RESULTS:
| lambda | nil | (org-mime-change-element-style blockquote border-left: 2px solid gray; padding-left: 4px;)                    |
| lambda | nil | (org-mime-change-element-style pre (format color: %s; background-color: %s; padding: 0.5em; #E6E1DC #232323)) |

end imported code

** org babel
:PROPERTIES:
:ID:       5fc7e3ce-61fb-47de-8517-29082f4d4340
:END:
Org babel lets you run code snippets inside org-mode!  It's a great literate programming environment!


  To edit a source code block, with point on the src block, type "C-c '".  For example move point to the next "#" on the
  =#+BEGIN_SRC= block, then type "C-c '".
  #+BEGIN_SRC org
    ,#+BEGIN_SRC sh
    ls
    ,#+END_SRC
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    ;; ob-http is needed to run http calls inside org-mode
    (use-package ob-http :ensure t)
    (setq geiser-default-implementation 'guile)

    ;; TODO FIXME this defun needs to be deleted
    ;; the org-mode has removed org-babel-get-header
    ;; ob-sh needs to update to use the new version.
    (defun org-babel-get-header (params key &optional others)
      (delq nil
            (mapcar
             (lambda (p) (when (funcall (if others #'not #'identity) (eq (car p) key)) p))
             params)))

    (after-load 'org
      (org-babel-do-load-languages
       'org-babel-load-languages
       '(
         (awk . t)
         (calc . t)
         (C . t)
         (emacs-lisp . t)
         (haskell . t)
         ;;(http . t)
         (gnuplot . t)
         ;;(latex . t)
         (ledger . t)
         (js . t)
         (perl . t)
         (python . t)
         (gnuplot . t)
         ;;org-babel does not currently support php.  That is really sad.
         ;;(php . t)
         ;;(R . t)
         (scheme . t)
         (sh . t)
         (sql . t)
         ;;(sqlite . t)
         )))

    (setq org-latex-create-formula-image-program 'imagemagick)
    ;; DO NOT set up ditaa.  It breaks (helm-find-files) C-x C-f
    ;;(ditaa . t)
    ;;(setq org-ditaa-jar-path "/usr/share/java/ditaa/ditaa-0_9.jar")
    ;; display inline images in org-mode
    ;;(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  #+END_SRC

  #+RESULTS:
*** fixing babel
:PROPERTIES:
:ID:       d1892137-5437-4a45-8615-c7ec0836e2f4
:END:

New versions of org have removed org-babel get header.  Some plugins still use it.  So I'm defining it until they catch up.

#+BEGIN_SRC emacs-lisp
(defun org-babel-get-header (params key &optional others)
  (delq nil
        (mapcar
         (lambda (p) (when (funcall (if others #'not #'identity) (eq (car p) key)) p))
         params)))
#+END_SRC
** org invoice
:PROPERTIES:
:ID:       4dc5cf24-8878-498c-a332-41f87ee08fda
:END:

  #+BEGIN_SRC emacs-lisp
    (use-package org-invoice)
  #+END_SRC

  #+RESULTS:
  : org-invoice

  This lests you manage invoices with org-mode.  It is pretty cool!
  You can create invoices with the following format.  And just call org-invoice-report on the
  begin invoice.  Be careful NOT to put an inactive time stamp anywhere in the tree unless you want that
  parent to show up in the invoice.  ie: If you create a notes heading, don't have an inactive time stamp like
  <2015-09-02 Sat> because when you generate that invoice, Notes will show up in the invoice even though it
  has no time associated with it

  #+BEGIN_SRC org
    ,* Working for Some Company

    ,#+BEGIN: invoice

     | Task / Date                   | Time |  Price |
     |-------------------------------+------+--------|
     | Wednesday, September 02, 2015 | 9:57 | 149.25 |
     | HTML Design                   | 9:57 | 149.25 |
     |-------------------------------+------+--------|
     | Total:                        | 9:16 | 149.00 |
    ,#+END:
  #+END_SRC

** COMMENT org-notify lets you know when you have upcoming appointments
  I would like to get this set up so that it shows pop-ups using a lua script.  That way I can set it up to use awesome's
  pop up library. At the moment it only notifies you when you have approaching deadlines and only certain ones.  It's a little odd.
 #+BEGIN_SRC emacs-lisp
   (use-package org-notify
     :config
     (org-notify-add 'appt
                     '(:time "-1s" :period "20s" :duration 10
                             :actions (-message -ding))
                     '(:time "15m" :period "2m" :duration 100
                             :actions -notify)
                     '(:time "2h" :period "5m" :actions -message)
                     '(:time "3d" :actions -email)))
   (add-hook 'after-init-hook 'org-notify-start)


  #+END_SRC

  #+RESULTS:
  | default | ((:time 1h :actions -notify/window :period 2m :duration 60)) | appt | ((:time -1s :period 20s :duration 10 :actions (-message -ding)) (:time 15m :period 2m :duration 100 :actions -notify) (:time 2h :period 5m :actions -message) (:time 3d :actions -email)) |

** org-inlinetask
:PROPERTIES:
:ID:       ea415ac9-07b1-4eae-a8eb-3cd84d7f216c
:END:
   Org inline task lets you define an inline task without treating it like a headline
   #+BEGIN_SRC emacs-lisp
     (use-package org-inlinetask)
   #+END_SRC

   #+RESULTS:
   : org-inlinetask

   Suppose you have something like this where point is at point:

   #+BEGIN_SRC org
     - [X] Call the farmer about buying his cows

           POINT

           I let him know that his cows were all rather nice and left a voicemail.  If he does not get back to me,
           Then I'll have to call him again


     - [ ] call your momma
       Let her know she's a good Mom
   #+END_SRC

   Pressing C-c C-x t will insert an inline task like the one below

   #+BEGIN_SRC org
           - [X] Call the farmer about buying his cows
     ,*************** Call Mark S. Davis today again about making his site better.  If he does not respond move on.
                     SCHEDULED: <2015-11-30 Mon>
     ,*************** END
                 I let him know that his cows were all rather nice and left a voicemail.  If he does not get back to me,
                 Then I'll have to call him again


           - [ ] call your momma
             Let her know she's a good Mom
   #+END_SRC
** org-habit
:PROPERTIES:
:ID:       70cbc5a4-78cc-4fda-af2a-08f6a5ead72c
:END:
   Org habit is a nice way to let you know how well you are doing on your habits.  It shows you a nice
   little color graph in your agenda view.  It is kind of cool.
   #+BEGIN_SRC emacs-lisp
   (use-package org-habit)
   #+END_SRC

   #+RESULTS:
   : org-habit
** org-protocal
:PROPERTIES:
:ID:       692f9752-71fb-46ed-87ad-8a7bd664e42e
:END:
Org protocal allows you to capture things from firefox or other applications!  Cool!

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook '(lambda ()
                              (require 'org-protocol)))
#+END_SRC

#+RESULTS:
: org-protocol
** org-id
:PROPERTIES:
:ID:       ca509e16-9845-472b-be83-fc3a89a11a91
:END:
Org-id is a way to create unique IDs to org-mode files.  Each heading can have a unique ID.  Org can then create a link to that heading.  The link will still work, even if you move entry IDs between files.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook '(lambda ()
                              (require 'org-id)
                              (setq org-id-link-to-org-use-id t)))
#+END_SRC
** COMMENT org-php
:PROPERTIES:
:ID:       ba5eaab7-14db-4c4a-9f23-81bc1d2895c7
:END:
This would be very cool if org-mode had this.
I need to have a php REPL available if I am going to get an ob-php.
#+BEGIN_SRC emacs-lisp
(use-package psysh :ensure t)
#+END_SRC

** org gnu-plot
:PROPERTIES:
:ID:       660f5c8d-f80d-43ea-a8ac-110be0a4d45f
:END:
#+BEGIN_SRC emacs-lisp
(use-package gnuplot :ensure t)
#+END_SRC

I can use org-mode to plot tables via gnu plot!

Just type C-"g below.  Or ~org-plot/gnuplot~
#+PLOT: title:"Citas" ind:1 deps:(3) type:2d with:histograms set:"yrange [0:]"
| Sede      | Max cites | H-index |
|-----------+-----------+---------|
| Chile     |    257.72 |   21.39 |
| Leeds     |    165.77 |   19.68 |
| Sao Paolo |     71.00 |   11.50 |
| Stockholm |    134.19 |   14.33 |
| Morelia   |    257.56 |   17.67 |

* My Org-mode-hook
:PROPERTIES:
:ID:       ec8fbf48-40c6-4e7c-bb20-bfac6b46fb08
:END:
Org-mode does not play well with yasnippet.  So this function that I got here [[info:org#Conflicts][info:org#Conflicts]] should help
with making yasnippet play well with org-mode.  It seems to 1st make TAB try to do any org expanding, then it'll
try to expand a yasnippet.

#+BEGIN_SRC emacs-lisp
(defun yas/org-very-safe-expand ()
    (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
#+END_SRC

#+RESULTS:
: yas/org-very-safe-expand

#+BEGIN_SRC emacs-lisp
  ;; I want to get write-good-mode set up again, because it's awesome.
  (use-package writegood-mode :ensure t :defer t)

  (add-hook 'org-mode-hook '(lambda ()

                                  ;; https://bitbucket.org/ukaszg/org-eldoc org eldoc looks cool
                                  ;; but I can't get it to work
                                  ;; (require 'org-eldoc)
                                  ;;(org-eldoc-load)
                                  ;; (make-variable-buffer-local 'yas/trigger-key)
                                  ;;(setq yas/trigger-key [tab])
                                  ;;(add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
                                  ;; (define-key yas/keymap [tab] 'yas/next-field)
                                  ;; make the lines in the buffer wrap around the edges of the screen.
                                  ;; YES!!!!! These next two modes auto-indents org-buffers as you type!  NO NEED FOR
                                  ;; to press C-c q  or fill-paragraph ever again!
                                  (visual-line-mode)
                                  (org-indent-mode)
                                  (require 'writegood-mode)
                                  ;; apparently this does the same thing as the above combined modes
                                  ;; this seems to work better than visual line mode.  Why have I not heard of this before?
                                  ;;(toggle-word-wrap)
                                  (org-bullets-mode 1)
                                  ;;make ">=" look like >=, etc.
                                  (push '(">=" . ?≥) prettify-symbols-alist)
                                  (push '("<=" . ?≤) prettify-symbols-alist)
                                  (push '("\\geq" . ?≥) prettify-symbols-alist)
                                  (push '("\\leq" . ?≤) prettify-symbols-alist)
                                  (push '("\\neg" . ?¬) prettify-symbols-alist)
                                  (push '("\\rightarrow" . ?→) prettify-symbols-alist)
                                  (push '("\\leftarrow" . ?←) prettify-symbols-alist)
                                  (push '("\\infty" . ?∞) prettify-symbols-alist)
                                  (push '("-->" . ?→) prettify-symbols-alist)
                                  (push '("<--" . ?←) prettify-symbols-alist)
                                  (push '("\\lambda" . ?λ) prettify-symbols-alist)
                                  (push '("\\exists" . ?∃) prettify-symbols-alist)
                                  (push '("\\nexists" . ?∄) prettify-symbols-alist)
                                  (push '("\\forall" . ?∀) prettify-symbols-alist)
                                  (push '("\\or" . ?∨) prettify-symbols-alist)
                                  (push '("\\and" . ?∧) prettify-symbols-alist)
                                  (push '(":)" . ?☺) prettify-symbols-alist)
                                  (push '("):" . ?☹) prettify-symbols-alist)
                                  (push '(":D" . ?☺) prettify-symbols-alist)
                                  (push '("\\checkmark" . ?✓) prettify-symbols-alist)
                                  (push '("\\check" . ?✓) prettify-symbols-alist)
                                  (push '("1/4" . ?¼) prettify-symbols-alist)
                                  (push '("1/2" . ?½) prettify-symbols-alist)
                                  (push '("3/4" . ?¾) prettify-symbols-alist)
                                  (push '("1/7" . ?⅐) prettify-symbols-alist)
                                  ;; ⅕ ⅖ ⅗ ⅘ ⅙ ⅚ ⅛ ⅜ ⅝ ⅞
                                  (push '("ae" . ?æ) prettify-symbols-alist)
                                  (push '("^_^" . ?☻) prettify-symbols-alist)))
#+END_SRC

* My org-mode preferences
** A big setq
:PROPERTIES:
:ID:       4725eb30-c909-4c64-b3cc-2be91448f927
:END:

Make calendar highlight upcoming items
#+BEGIN_SRC emacs-lisp
(setq org-hide-leading-stars t)
#+END_SRC

Seeing the ... that org mode does to how you that the heading continues in the text beneith it is kind of boring
http://endlessparentheses.com/changing-the-org-mode-ellipsis.html?source=rss
Other interesting characters are ↴, ⬎, ⤷, and ⋱.
#+BEGIN_SRC emacs-lisp
(setq org-ellipsis " ↴")

#+END_SRC

Make RET follow a link
#+BEGIN_SRC emacs-lisp
  (setq org-return-follows-link t)
#+END_SRC

  #+BEGIN_SRC emacs-lisp
    (setq
     ;; hide the leading stars in my org files
     org-hide-leading-stars t
     ;;seeing the ... that org mode does to how you that the heading continues in the text beneith it is kind of boring
     ;; http://endlessparentheses.com/changing-the-org-mode-ellipsis.html?source=rss
     ;; Other interesting characters are ↴, ⬎, ⤷, ⋱, "⬎", and "⤵"
     org-ellipsis " ↴"
     ;; make org show inline images by default
     ;; This can be overridden by #+STARTUP: noinlineimages
     org-startup-with-inline-images t
     ;; make RET follow a link
     org-return-follows-link t
     ;; only show times on items in the agenda, if we have an item at a specified time
     ;; if we set it to true, then we see all the times every 2 hours.  Takes up too much space.
     org-agenda-use-time-grid nil
     ;; don't let me accidentally delete text without realizing it in org.  ie: point is buried in a subtree, but you only
     ;; see the heading and you accidentally kill a line without knowing it.
     ;; this might not be supported for evil-mode
     org-catch-invisible-edits 'show-and-error
     ;; whenever I change state from TODO to DONE org will log that timestamp. Let's put that in a drawer
     org-log-into-drawer t
     ;; make org-mode record the date when you finish a task
     org-log-done 'time
     ;;org-log-done 'nil
     ;; when you press S-down, org changes the timestamp under point
     org-edit-timestamp-down-means-later t
     ;; make the agenda start on today not wednesday
     org-agenda-start-on-weekday nil
     ;; don't make the agenda only show saturday and Sunday if today is saturday. Make it show 7 days
     org-agenda-span 7
     ;; using the diary slows down the agenda view
     ;; but it also shows you upcoming calendar events
     org-agenda-include-diary t
     ;; this tells the agenda to take up the whole window and hide all other buffers
     org-agenda-window-setup 'current-window
     ;; this tells org-mode to only quit selecting tags for things when you tell it that you are done with it
     org-fast-tag-selection-single-key nil
     org-html-validation-link nil
     org-export-kill-product-buffer-when-displayed t
     ;; are there more backends that I can use?
     org-export-backends '(ascii beamer html texinfo latex)
     ;;most of these modules let you store links to various stuff in org
     org-bullets-bullet-list
     '("◉" "◎" "♠" "○" "►" "◇")
     org-modules '(org-bbdb org-gnus org-info org-invoice man org-toc org-habit org-mime org-crypt org-bullets org-id)
     ;; load in the org-modules
     ;;org-load-modules-maybe t
     ;; where to put the :action: or :work: tag after a heading.  80 colums over
     org-tags-column 80
     ;; don't ask me if I want to run an babel code block.  I know what I'm doing
     org-confirm-babel-evaluate nil
     ;; activate org speed commands
     org-use-speed-commands t)

    ;;a visual hint to let you know what line you are in in org-mode agenda
    (add-hook 'org-agenda-finalize-hook '(lambda () (hl-line-mode)))
  #+END_SRC


** what files org-mode opens
:PROPERTIES:
:ID:       f217c699-23c2-4a58-bb59-73b639c8447a
:END:
#+BEGIN_SRC emacs-lisp
;; define what files org opens
(add-to-list 'auto-mode-alist '("\\.\\(org\\|txt\\)$" . org-mode))
;;(setq org-default-notes-file (concat org-directory "/notes.org"))
#+END_SRC

** my org capure templates
:PROPERTIES:
:ID:       e7e19c92-c2a6-437c-8aad-df01fe3c8437
:END:
  This is SOOOO USEFUL!!!! Org capture lets you quickly jot down a thought that you have and place it in a file under
  a heading that you specify.  I have captchas for shopping, for books to read, for things to do.

  #+BEGIN_SRC emacs-lisp
    (setq org-capture-templates
          '(

            ("B" "Things I want to buy" entry (file+headline
                                               "~/programming/org/projects/managing-my-monies.org" "things I want to buy")
             "* %?\nEntered on %U\n  %i\n  %a")

            ("c" "Computers Anything")
            ("ca" "Awesome WM" entry (file+headline "~/programming/org/gtd.org" "awesome WM someday")
             "* TODO %?\nEntered on %U\n  %i\n  %a")


             ;; Emacs things
            ("ce" "Emacs")

            ("ceb" "bugs" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "Emacs bugs")
             "* TODO %?\n  %i\n  %a")

            ("ceb" "evil-mode" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "evil-mode")
             "* TODO %?\n  %i\n  %a")

            ("cef" "flycheck" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "flycheck-mode")
             "* TODO %?\n  %i\n  %a")

            ("ceM" "Emacs Meetup" entry (file+headline "~/programming/org/projects/emacs-meetup-vincent-laf-emacslaf.org" "things to talk about")
             "* %?\nEntered on %U\n  %i\n  %a")

            ("ceo" "Org-mode" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "org-mode")
             "* TODO %?\n  %i\n  %a")
             ("ceR" "Emacs Reference")
            ("ceRR" "Emacs Reference" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "emacs reference")
             "* %?\nEntered on %U\n  %i\n  %a")
             ("ceRe" "emacs evil reference" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "evil reference")
             "* TODO %?\n  %i\n  %a")
             ("ceRg" "emacs gnus reference" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "gnus reference")
             "* TODO %?\n  %i\n  %a")
            ("ceRo" "emacs org reference" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "org reference")
             "* TODO %?\n  %i\n  %a")
            ("ceRm" "emacs magit reference" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "tags reference")
             "* TODO %?\n  %i\n  %a")
            ("ceRt" "emacs tags reference" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "tags reference")
             "* TODO %?\n  %i\n  %a")

             ("cet" "emacs Todo")
            ("cett" "emacs Todo" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "emacs someday")
             "* TODO %?\n  %i\n  %a")
            ("cete" "emacs evil someday" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "evil someday")
             "* TODO %?\n  %i\n  %a")
            ("cetf" "emacs flycheck someday" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "flycheck someday")
             "* TODO %?\n  %i\n  %a")
            ("cetg" "emacs gnus someday" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "gnus someday")
             "* TODO %?\n  %i\n  %a")
            ("ceth" "emacs helm someday" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "helm someday")
             "* TODO %?\n  %i\n  %a")
            ("ceto" "emacs org someday" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "org someday")
             "* TODO %?\n  %i\n  %a")
            ("cetT" "emacs tags someday" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "tags someday")
             "* TODO %?\n  %i\n  %a")
            ("cetw" "web-mode someday" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "web-mode someday")
             "* TODO %?\n  %i\n  %a")
             ;;End Emacs things


            ("cG" "Gimp Basics Reference" entry (file+headline "~/manuals/gimp.org" "Basic Concepts")
             "* %?\nEntered on %U\n  %i\n  %a")
            ("cH" "The GNU HURD")
            ("cHt" "Hurd" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org"
                                               "Hurd")
             "* TODO %?\n  %i\n  %a")
            ("ct" "General Computer TODO"
             entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "General TODO")
             "* TODO %?\n  %i\n  %a")
            ("cw" "Waypoint")
            ("cwi" "ibca Web App")
            ("cwib" "bugs that need fixin'" entry (file+headline "~/programming/org/projects/working-for-waypoint.org"
                                                                 "bugs that need fixin'")
             "* TODO %?\n  %i\n  %a")
            ("cwic" "core features that must be done" entry (file+headline "~/programming/org/projects/working-for-waypoint.org"
                                                                           "core features that must be done")
             "* TODO %?\n  %i\n  %a")
            ("cwif" "features the app should have" entry (file+headline "~/programming/org/projects/working-for-waypoint.org"
                                                                        "features the app should have") "* TODO %?\n  %i\n  %a")
            ("cwir" "IBCA Reference" entry (file+headline "~/programming/org/projects/working-for-waypoint.org"
                                                          "IBCA Reference") "* %?\nEntered on %U\n  %i\n  %a")
            ("cwiw" "what I have done" entry (file+headline "~/programming/org/projects/working-for-waypoint.org"
                                                            "what I have done") "* DONE %?\n  %i\n  %a")
            ("ch" "high star todo"
             entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "make high star an android app")
             "* todo %?\n  %i\n  %a")
            ("cl" "linux TODO" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "linux someday")
             "* TODO %?\n  %i\n  %a")
            ("cL" "Linux Reference" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "linux reference")
             "* %?\nEntered on %U\n  %i\n  %a")
            ("co" "organ TODO" entry (file+headline "~/programming/org/projects/become-an-awesome-hacker.org" "make organ an android app")
             "* TODO %?\n  %i\n  %a")
            ("cf" "Free the world" entry (file+headline "~/programming/org/gtd.org" "free the world free content")
             "* %?\nEntered on %U\n  %i\n  %a")

            ("cW" "Web")

            ("cWA" "Accrisoft Reference" entry (file+headline "~/programming/org/web.org" "Accrisoft reference")
             "* %?\nEntered on %U\n  %i\n  %a")

            ("cWB" "Bootstrap Reference" entry (file+headline "~/programming/org/web.org" "Bootstrap reference")
             "* %?\nEntered on %U\n  %i\n  %a")

            ("cWS" "Shoppify Reference" entry (file+headline "~/programming/org/web.org" "Shoppify reference")
             "* %?\nEntered on %U\n  %i\n  %a")

            ("cWW" "Web reference" entry (file+headline "~/programming/org/web.org" "Web reference")
             "* %?\nEntered on %U\n  %i\n  %a")


            ("C" "Community")
            ("Cc" "community TODO" entry (file+headline "~/programming/org/gtd.org" "community someday")
             "* TODO %?\n  %i\n  %a")

            ("Cn" "nice things to say" entry (file+headline "~/programming/org/projects/get-close-to-God.org" "nice things to say")
             "* TODO %?\nEntered on %U\n  %i\n  %a")
            ("Cs" "Social Skills Notes" entry (file+headline "~/programming/org/being-social.org" "Social Skills Notes")
             "* %?\nEntered on %U\n  %i\n  %a")

            ("C" "Calendar TODO" entry (file+headline "~/programming/org/gtd.org" "calendar")
             "* TODO %?\n  %i\n  %a")

            ("e" "entertainment")
            ("eb" "Books to Read" entry (file+headline "~/programming/org/projects/whatever-I-want.org"
                                                       "Books to Read") "*  %i\n  %a")
            ("eM" "Good Movies Reference" entry (file+headline "~/programming/org/projects/whatever-I-want.org" "Good Movies") "*  %i\n  %a")
            ("em" "movies to watch" entry (file+headline "~/programming/org/projects/whatever-I-want.org" "movies to watch") "*  %i\n  %a")
            ("eU" "good music reference" entry (file+headline "~/programming/org/projects/whatever-I-want.org"
                                                              "good music reference") "*  %i\n  %a")
            ("eg" "games to play" entry (file+headline "~/programming/org/projects/whatever-I-want.org"
                                                       "games to play") "*  %i\n  %a")

            ("g" "getting close to God")
            ("gg" "get a close friend" entry (file+headline "/home/joshua/programming/org/projects/get-close-to-God.org"
                                                            "get a close friend") "* TODO %?\n  %i\n  %a")
            ("gb" "Boundaries")
            ("gbn" "Boundary Notes" entry (file+headline "~/programming/org/gtd.org" "Boundary Notes")
             "* %?\nEntered on %U\n  %i\n  %a")
            ("gbl" "Lowering My Expectations of Myself" entry (file+headline "~/programming/org/gtd.org"
                                                                             "Lowering My Expectations of Myself")
             "* %?\nEntered on %U\n  %i\n  %a")
            ("gbs" "Boundaries To Enforce" entry (file+headline "~/programming/org/projects/get-close-to-God.org" "Setting Boundaries")
             "* TODO %?\n  %i\n  %a")



            ("M" "Math")
            ("Mf" "fun math problems" entry (file+headline "/home/joshua/programming/org/projects/math.org" "fun math problems") "* TODO %?\n  %i\n  %a")
            ("p" "payless TODO" entry (file+headline "~/programming/org/gtd.org" "shopping todo")
             "* TODO %?\n  %i\n  %a")
            ("r" "Reference" entry (file+headline "~/programming/org/gtd.org" "general reference")
             "* %?\nEntered on %U\n  %i\n  %a")
            ("t" "TODO" entry (file+headline "~/programming/org/gtd.org" "general todo")
             "* TODO %?\nEntered on %U\n  %i\n  %a")
            ("w" "Weblink" entry (file (expand-file-name "~/programming/org/gtd.org" "org capture"))
             "* %c\n  :PROPERTIES:\n  :CREATED: %U\n  :END:\n  - Quote:\n    %i" :unnarrowed)

            ("q" "Quotations" entry (file+headline "~/programming/org/quotes.org" "Quotations")
             "* %?\nEntered on %U\n  %i\n  %a")
            ))
  #+END_SRC


  #+RESULTS:
  | B | Things I want to buy | entry | (file+headline ~/programming/org/projects/managing-my-monies.org things I want to buy) | * %? |

** COMMENT Agenda Configuration
*** Agenda icons via Category
:PROPERTIES:
:ID:       1f343138-b49f-447e-8f34-2a1d05bc3af2
:END:
   You can easily create custom icons to show up in your agenda next to your specific tasks. My icons are all about
   30 by 30 px.
   #+BEGIN_SRC emacs-lisp
    (setq org-agenda-category-icon-alist '(
                                      ("hacker"      "/home/joshua/pictures/org-icons/gnu-linux-icon.png" nil nil nil nil)
                                      ("MAKING CASH"   "/home/joshua/pictures/org-icons/money.png" nil nil nil nil)
                                      ("SEEKING GOD" "/home/joshua/pictures/org-icons/god.png" nil nil nil nil)
                                      ("BILLS"    "/home/joshua/pictures/org-icons/bills.png" nil nil nil nil)
                                      ("emacs"       "/home/joshua/pictures/org-icons/emacs.png" nil nil nil nil)
                                      ("WORK"       "/home/joshua/pictures/org-icons/work.png" nil nil nil nil)
                                      ))
   #+END_SRC

   #+RESULTS:
   | hacker      | /home/joshua/pictures/org-icons/gnu-linux-icon.png | nil | nil | nil | nil |
   | MAKING CASH | /home/joshua/pictures/org-icons/money.png          | nil | nil | nil | nil |
   | SEEKING GOD | /home/joshua/pictures/org-icons/god.png            | nil | nil | nil | nil |
   | BILLS       | /home/joshua/pictures/org-icons/bills.png          | nil | nil | nil | nil |
   | emacs       | /home/joshua/pictures/org-icons/emacs.png          | nil | nil | nil | nil |
   | WORK        | /home/joshua/pictures/org-icons/work.png           | nil | nil | nil | nil |
*** I would like to generate my org-agenda-files
:PROPERTIES:
:ID:       655610ba-7bc8-4cb8-b5a4-7e8d754f84b2
:END:

But I haven't been able to figure out how to do it.

  Org-agenda-files are a list of files where you store your TODOs.  These are your things that need to be done, scheduled items,
  deadlines, recurring items, etc.  Then pressing "C-c a a" lets you build your agenda from all of your agenda files.  It is very
  useful. But it would be a pain to have to manually enter all of your agenda files.  So I've got some code here that I found online
  that lets me generate my agenda files.

  Org-refile-targets are a list of files and possibly headings in any org file that you can at any time jump to move pits of an
  org file to.  So let's say you're in weekly schedule.org, BUT you wish to quickly jump to shopping.org at the heading
  "Groceries",  you can very easily do that.

  EDIT:  I'm not really sure if this code is worth it.  The command org-agenda-files already stores your agenda files,  and I think that my custom.el file already keeps track of my agenda files.  Furthermore, (org-agenda-file-to-front) bound to "C-c [" is a nice way to keep track of agenda files.

  #+BEGIN_SRC emacs-lisp

    (defun my-org-list-files (dirs ext)
      "Function to create list of org files in multiple subdirectories.
    This can be called to generate a list of files for
    org-agenda-files or org-refile-targets.

    DIRS is a list of directories.

    EXT is a list of the extensions of files to be included."
      (let ((dirs (if (listp dirs)
                      dirs
                    (list dirs)))
            (ext (if (listp ext)
                     ext
                   (list ext)))
            files)
        (mapc
         (lambda (x)
           (mapc
            (lambda (y)
              (setq files
                    (append files
                            (file-expand-wildcards
                             (concat (file-name-as-directory x) "*" y)))))
            ext))
         dirs)
        (mapc
         (lambda (x)
           (when (or (string-match "/.#" x)
                     (string-match "#$" x))
             (setq files (delete x files))))
         files)
        files))


    (defvar my-org-agenda-directories '("~/programming/org/")
      "List of directories containing org files.")
    (defvar my-org-agenda-extensions '(".org")
      "List of extensions of agenda files")

    (setq my-org-agenda-directories '(
                                      "~/gtd/"
                                      "~/programming/org/"
                                      "~/programming/org/"
                                      "~/programming/org/projects"))
    (setq my-org-agenda-extensions '(".org"))

    (defun my-org-set-agenda-files ()
      (interactive)
      (setq org-agenda-files (my-org-list-files
                              my-org-agenda-directories
                              my-org-agenda-extensions)
            ;;org-refile-targets (my-org-list-files
            ;;                  my-org-agenda-directories
            ;;                my-org-agenda-extensions
            ;;  )
            ))

    (my-org-set-agenda-files)

  #+END_SRC

  Refile targets include this file and any file contributing to the agenda - up to 5 levels deep  But unfortunately, I cannot
  get org-refile to work.


  You absolutely want org-refile targets!!! Trust me on this!!!  You can very quickly jot down your todo list in org,
  in no particular order, then when your list is done, you can quickly refile your agenda files very quickly.  This works awesomeingly with helm-mode.


  This was some crusty code that I'm not sure if I need to keep to get refile targets to work.

  ;; (setq org-completion-use-ido nil)
  ;; (setq org-refile-allow-creating-parent-nodes t)

  #+BEGIN_SRC emacs-lisp
    (setq org-refile-targets '((nil :maxlevel . 2)
                               (org-agenda-files :tag . "capture")
                               (org-agenda-files :maxlevel . 2)))
    (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
    (setq org-refile-use-outline-path t)                  ; Show full paths for refiling
  #+END_SRC

*** My custom agenda commands
:PROPERTIES:
:ID:       928397ca-699b-41db-bcee-9e6f1a306d86
:END:
    Any commands that I make here are accessable with C-c a <key>

    #+BEGIN_SRC emacs-lisp
      (setq org-agenda-custom-commands
            '(
              ;; a global search for agenda entries planned this week/day
              ("x" agenda)

              ;; a global search for agenda entries planned this week/day, but
              ;;only those with hour specifications
              ("y" agenda*)

              ;; a global searcher with "WAITING" as the TODO keywoard
              ;; but I don't use waiting as a keyword
              ;; ("w" todo "WAITING")
              ;; ("w" todo "WAITING")

              ("D" todo "DELEGATED" )

              ;; the same search bit with searching for projects
              ("P" todo "PROJECT")


              ("S" todo "STARTED" )

              ("c" todo "CHARGED")

              ;; the same search but only in the current buffer and displaying the
              ;; results as a sparse tree
              ("W" todo-tree "WAITING")

              ;; a global search for headlines marked :boss: bot not :urgent:
              ("u" tags "+boss-urgent")

              ;; The same search but limiting the search to items that are TODO items
              ("v" tags-todo "+boss-urgent")

              ;; the same search as C-c a u but only in the current buffer displaying
              ;; the results in a sparse tree
              ("U" tags-tree "+boss-urgent")

              ;; Create a sparse tree in the current buffer with all entries containing
              ;;the word FIXME
              ("f" occur-tree "\\<FIXME\\>")

              ;;
              ;; ("h" . "HOME+Name tags searches") ; description for "h" prefix
              ;; ("hl" tags "+home+Lisa")
              ;; ("hp" tags "+home+Peter")
              ;; ("hk" tags "+home+Kim")


            ;; ("H" "Office and Home Lists"
            ;; ((agenda)
            ;; (tags-todo "OFFICE")
            ;; (tags-todo "HOME")
            ;; (tags-todo "COMPUTER")
            ;; (tags-todo "DVD")
            ;; (tags-todo "READING")))
              )
            )
    #+END_SRC
***** COMMENT grading myself file.
    I have a file that keeps tracks of the things that I want to do often.  This opens that.
    #+BEGIN_SRC emacs-lisp
      (defun my/org-grading-myself-agenda ()
      "This function loads up my grading myself toolset."
      (interactive)
      (let (org-agenda-files)
        (setq org-agenda-files '("/home/joshua/programming/org/projects/grading-myself.org"))
        (org-agenda-list)))

      (org-defkey org-agenda-mode-map "g" 'org-agenda-filter-by-category)
      ;;(org-defkey global-map (kbd "C-c a g") 'org-agenda-filter-by-category)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (defun my/org-grading-myself-agenda-and-regular-agenda ()
        "This function loads up my grading myself toolset."
        (interactive)
        (add-to-list 'org-agenda-files '"/home/joshua/programming/org/projects/grading-myself.org")
        (org-agenda-list)
        ;;how do you remove an element from a list?  I have no idea.
        )
    #+END_SRC
** I can make add words to the TODO and DONE keywords
:PROPERTIES:
:ID:       bc85cb78-e963-49ba-98f6-0f3b232029ed
:END:
  #+BEGIN_SRC emacs-lisp
  ; Targets start with the file name - allows creating level 1 tasks
    (setq org-refile-use-outline-path (quote file))
  #+END_SRC

  : file

  I want to make specific TODO states.  Anything after the "|" is marked completed and appears green.  Anything before it, shows
  that the item is still actionable and it is red.

  I should also point out, that most people will probably want TODO to be the first keyword.  Suppose that you have a recurring
  task like the following:

  #+BEGIN_SRC org
    ,* TODO Brush my teeth
      SCHEDULED: <2015-11-15 Sun +1d>
      :LOGBOOK:
      - State "TODO"       from              [2015-11-15 Sun 09:24]
      :END:
  #+END_SRC

  Whenever you complete this task, and do a C-c C-t (org-todo), org will put a short message inside a drawer under the item.
  Then, since this item is not properly DONE (since it still repeats), org-mode will try to find the proper TODO state to put in.
  By default, org-mode uses the first keyword specified by org-todo-keywords.  So most users will probably want to make TODO
  the first keyword.

  Also the TODO(t!), means that "t" will be used as the quick key for this TODO entry in the todo pop up dialog.  The "!" means to
  only record the time of the state change. You can also use a "@" instead of "!" to specify that you would like to enter a note
  when you change the item's state.  So "DONE(d@)" means that you want to use d as the shortcut key, and you'd org-mode to prompt
  you for a not when you do so.

  You can also have syntax like "PROJECT(p@/!)", which means to record a note when you change an items TODO keyword to project,
  and you'd like to only record a timestamp if that item's keyword ever changes to any other todo keyword.

  Apparently I can define a NEXTACTION keyword too. http://thread.gmane.org/gmane.emacs.orgmode/523


  Set my todo keywords
  #+BEGIN_SRC emacs-lisp

    (setq org-todo-keywords
          '((sequence "TODO(t!)" "PROJECT(r)" "STARTED(s!)"
                      "WAITING(w!)" "CHARGED(c!)" "|" "PAID(p!)" "DONE(d!)")))


    (setq org-todo-keyword-faces
          '(("PROJECT" . "#4da6ff")
            ("STARTED" . "#ffff99")
            ("WAITING" . "#ffcc00")
            ("CHARGED" .  "#e085e0")))


  #+END_SRC

  #+RESULTS:
  : ((PROJECT . #4da6ff) (STARTED . #ffff99) (WAITING . #ffcc00) (CHARGED . #e085e0))

  #+BEGIN_SRC emacs-lisp

  #+END_SRC

** Org Clock Settings
:PROPERTIES:
:ID:       97426883-1e15-4141-8161-a128d91920ce
:END:
This puts up in my top of my buffer the current running org clock.

  #+BEGIN_SRC emacs-lisp

;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persistence-insinuate t)
(setq org-clock-persist t)
(setq org-clock-in-resume t)

;; Change task state to STARTED when clocking in
(setq org-clock-in-switch-to-state "STARTED")
;; Save clock data and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
;; Removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)

;; Show clock sums as hours and minutes, not "n days" etc.
(setq org-time-clocksum-format
      '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))

;; Show the clocked-in task - if any - in the header line
(defun sanityinc/show-org-clock-in-header-line ()
  (setq-default header-line-format '((" " org-mode-line-string " "))))

(defun sanityinc/hide-org-clock-from-header-line ()
  (setq-default header-line-format nil))

(add-hook 'org-clock-in-hook #'sanityinc/show-org-clock-in-header-line)
(add-hook 'org-clock-out-hook #'sanityinc/hide-org-clock-from-header-line)
(add-hook 'org-clock-cancel-hook #'sanityinc/hide-org-clock-from-header-line)

(after-load 'org-clock
  (define-key org-clock-mode-line-map [header-line mouse-2] #'org-clock-goto)
  (define-key org-clock-mode-line-map [header-line mouse-1] #'org-clock-menu))

;;you can start clocking in on an event in the agenda buffer by pressing P
;;(use-package org-pomodoro
;;  :ensure t)
;;(after-load 'org-agenda
;;  (define-key org-agenda-mode-map (kbd "P") 'org-pomodoro))
  #+END_SRC

  #+RESULTS:
  : org-pomodoro

** customizing stuck projects
:PROPERTIES:
:ID:       9d5b3ec8-b9f7-444f-b22d-d02185f2c9b4
:END:
There is apparently a way to specify in your org agenda files where you have a stuck project, but I haven't figured out how to do it.

  C-c a # will list all of your stuck projects.  According to David Allen's Getting Things Done productivity system,
  a stuck project [fn:1] is one where the next action is not defined.  That is, your project does not have any next actions.  No one
  knows what the next step to do is for the project.

  Anyway, org-stuck-projects helps you to identify where your projects are.   It is a list with 4 entries:
  - A tags/todo/propery that identifies this heading as a project
  - A list of todo keywords that show that this project is NOT stuck.  If any of these todo keywords show up under the projects'
    tree, then that project is not stuck
  - A list of tags identifying non-stuck projects
  - A regexp matching non-stuck projects

  #+BEGIN_SRC emacs-lisp
  (setq org-stuck-projects '("PROJECT" ("TODO NEXT") ("action") "\\<IGNORE\\>" ))
  #+END_SRC

* trying to get mmm-mode to work
:PROPERTIES:
:ID:       e6804191-77c5-4daa-963c-092b4cb482b6
:END:
#+BEGIN_SRC emacs-lisp
  (use-package mmm-mode :ensure t)

  (after-load 'org
    (require 'mmm-mode)
    (setq mmm-global-mode 'maybe)
    (mmm-add-mode-ext-class 'org-mode "\\.org\\'" 'org-elisp)

    ;; mmm-add-group is more useful for org-mode...probably
    (mmm-add-classes
     '(
       (org-elisp
        :submode 'emacs-lisp-mode
        :face mmm-declaration-submode-face
        :front "#+BEGIN_SRC emacs-lisp"
        :back  "#+END_SRC"
        )
       )
     ))
#+END_SRC
* COMMENT misc
:PROPERTIES:
:ID:       1a006baf-51cd-454a-950e-3af9ff1915c5
:END:
** a hydra that I found online that lets you easily remember some of the org commands
:PROPERTIES:
:ID:       721dc190-9af1-441d-b3fa-1cfc0a92bafb
:END:
  this is not working?
  we want to remember the org keyboard navigation commands eh?
  https://github.com/abo-abo/hydra/wiki/Emacs
  #+BEGIN_SRC emacs-lisp

(defhydra hydra-outline (:color pink :hint nil)
  "
^Hide^             ^Show^           ^Move
^^^^^^------------------------------------------------------
_hs_: sublevels     _sa_: all         _u_: up
_hb_: body          _se_: entry       _n_: next visible
_ho_: other         _sc_: children    _p_: previous visible
_he_: entry         _sb_: branches    _f_: forward same level
_hl_: leaves        _st_: subtree     _b_: backward same level
_ht_: subtree

"
  ;; Hide
  ("hs" hide-sublevels)    ; Hide everything but the top-level headings
  ("hb" hide-body)         ; Hide everything but headings (all body lines)
  ("ho" hide-other)        ; Hide other branches
  ("he" hide-entry)        ; Hide this entry's body
  ("hl" hide-leaves)       ; Hide body lines in this entry and sub-entries
  ("ht" hide-subtree)      ; Hide everything in this entry and sub-entries
  ;; Show
  ("sa" show-all)          ; Show (expand) everything
  ("se" show-entry)        ; Show this heading's body
  ("sc" show-children)     ; Show this heading's immediate child sub-headings
  ("sb" show-branches)     ; Show all sub-headings under this heading
  ("st" show-subtree)      ; Show (expand) everything in this heading & below
  ;; Move
  ("u" outline-up-heading)                ; Up
  ("n" outline-next-visible-heading)      ; Next
  ("p" outline-previous-visible-heading)  ; Previous
  ("f" outline-forward-same-level)        ; Forward - same level
  ("b" outline-backward-same-level)       ; Backward - same level

  ("z" nil "leave"))

(define-key org-mode-map (kbd "C-c #") 'hydra-outline/body) ; by example
(global-set-key (kbd "C-c #") 'hydra-outline/body)
  #+END_SRC

** A definition I found online org-begin-template
:PROPERTIES:
:ID:       f86e0ea8-f4f3-45d5-af1a-2b7c30d0a91f
:END:
  I should really check this out at some point http://pragmaticemacs.com/emacs/wrap-text-in-an-org-mode-block/ In my most recent
  post on org-mode, I talked about using blocks to mark text as being latex, or source code and so on. I mentioned using the
  shortcuts like <e then TAB on a new line to create an empty block. Sometimes it is handy to wrap existing text in a block, and
  the following function does that for the text you have selected.

  This has been in my config file for ages and I can’t remember where it came from – I know I didn’t write it! A bit of googleing
  suggests this could be the origin, but if anyone knows different, let me know.

  I bind the function to C-< because it reminds me of the < shortcuts to create the blocks, and I don’t use the
  org-cycle-agenda-files that is usually bound to that key combo.

  #+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; function to wrap blocks of text in org templates                       ;;
  ;; e.g. latex or src etc                                                  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defun org-begin-template ()
  "Make a template at point."
  (interactive)
  (if (org-at-table-p)
      (call-interactively 'org-table-rotate-recalc-marks)
    (let* ((choices '(("s" . "SRC")
                      ("e" . "EXAMPLE")
                      ("q" . "QUOTE")
                      ("v" . "VERSE")
                      ("c" . "CENTER")
                      ("l" . "LaTeX")
                      ("h" . "HTML")
                      ("a" . "ASCII")))
           (key
            (key-description
             (vector
              (read-key
               (concat (propertize "Template type: " 'face 'minibuffer-prompt)
                       (mapconcat (lambda (choice)
                                    (concat (propertize (car choice) 'face 'font-lock-type-face)
                                            ": "
                                            (cdr choice)))
                                  choices
                                  ", ")))))))
      (let ((result (assoc key choices)))
        (when result
          (let ((choice (cdr result)))
            (cond
             ((region-active-p)
              (let ((start (region-beginning))
                    (end (region-end)))
                (goto-char end)
                (insert "#+END_" choice "\n")
                (goto-char start)
                (insert "#+BEGIN_" choice "\n")))
             (t
              (insert "#+BEGIN_" choice "\n")
              (save-excursion (insert "#+END_" choice))))))))))

;;bind to key
;;(define-key org-mode-map (kbd "C-<") 'org-begin-template)

#+END_SRC

** to load this file do =M-x org-babel-load-file= and it'll pop up helm and you'll have to say that you want
  to load this file.  All the scripts in this file will be exported and saved into init-org.el.  Then
  that file will be loaded.
* provide this file
:PROPERTIES:
:ID:       6d4c7e86-6fca-4b7c-b329-a1827a49e801
:END:
  #+BEGIN_SRC emacs-lisp
    (provide 'init-org)
  #+END_SRC
* Footnotes

[fn:2] I do use org-crypt in my erc-file to save some sensitive information.

[fn:1]  A project is an action that has multiple sequential steps.

|--------|
| img    |
| button |
|--------|
| img    |
| button |
|--------|
| img    |
| button |
|--------|
