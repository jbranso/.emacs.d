#+TITLE: My Org Initialization
#+AUTHOR: Joshua Branson
#+PROPERTY: header-args :
# this says that org mode will export up to the 4th level heading
# +OPTIONS: H:4
* My org use-package declaration
  #+BEGIN_SRC emacs-lisp
  (use-package org
  :ensure org-plus-contrib)
  #+END_SRC
* what files org-mode opens
#+BEGIN_SRC emacs-lisp
;; define what files org opens
(add-to-list 'auto-mode-alist '("\\.\\(org\\|txt\\)$" . org-mode))
;;(setq org-default-notes-file (concat org-directory "/notes.org"))
#+END_SRC
* Setting up Org-plugins
** org-crypt
  encrypting text under a heading in org
  [[info:org#org-crypt][info:org#org-crypt]]
   Any text below a headline that has a `:crypt:' tag will be
automatically be encrypted when the file is saved.  If you want to use
a different tag just customize the `org-crypt-tag-matcher' setting.

   To use org-crypt it is suggested that you have the following in your
`.emacs':

  #+BEGIN_SRC emacs-lisp
    (require 'org-crypt)
    (org-crypt-use-before-save-magic)
    (setq org-tags-exclude-from-inheritance (quote ("crypt")))
  #+END_SRC

  #+RESULTS:
  | crypt |

  GPG key to use for encryption
  Either the Key ID or set to nil to use symmetric encryption.
  This is my jbranson@setyourwaypoint.com key
  #+BEGIN_SRC emacs-lisp
     (setq org-crypt-key "E99C48112E969A17")
  #+END_SRC

  #+RESULTS:
  : E99C48112E969A17
  Auto-saving does not cooperate with org-crypt.el: so you need to turn it off if you plan to use org-crypt.el quite often.
  Otherwise, you'll get an (annoying) message each time you start Org.
  To turn it off only locally, you can insert this:
  # -*- buffer-auto-save-file-name: nil; -*-
  #+BEGIN_SRC emacs-lisp
    (setq auto-save-default nil)
  #+END_SRC

  #+RESULTS:

** this text underneith me should be encrypted                                  :crypt:
-----BEGIN PGP MESSAGE-----
Version: GnuPG v2

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
=eNA3
-----END PGP MESSAGE-----

** org mime

  http://orgmode.org/worg/org-contrib/org-mime.html
  I want to figure out how to install this, because I could then write html emails trivially with gnus
  #+BEGIN_SRC emacs-lisp
  (require 'org-mime)
  #+END_SRC


   imported code from http://orgmode.org/worg/org-contrib/org-mime.html

for those who use color themes with Dark backgrounds it is useful to set a dark background for all exported code blocks and example regions. This can be accomplished with the following:  And you should totally do this!  it looks SOO COOOL!
  #+BEGIN_SRC emacs-lisp
  (add-hook 'org-mime-html-hook
          (lambda ()
            (org-mime-change-element-style
             "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                           "#E6E1DC" "#232323"))))
  #+END_SRC

  the following can be used to nicely offset block quotes in email bodies
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mime-html-hook
          (lambda ()
            (org-mime-change-element-style
             "blockquote" "border-left: 2px solid gray; padding-left: 4px;")))
#+END_SRC

end imported code

** org babel
  #+BEGIN_SRC emacs-lisp
    (after-load 'org
      (org-babel-do-load-languages
       'org-babel-load-languages
       '(
         (awk . t)
         (calc .t)
         (emacs-lisp . t)
         (latex . t)
         ;;(ledger . t)
         (python . t)
         (awk . t)
         (C . t)
         (js . t)
         (gnuplot . t)
         ;; org-babel does not currently support php
         ;;(php . t)
         (sh . t)
         (sql . t)
         ;;(sqlite . t)
         (gnuplot . t)
         )))
  #+END_SRC

  #+RESULTS:
  : ((emacs-lisp . t) (awk . t) (C . t) (js . t) (python . t) (gnuplot . t) (sh . t) (gnuplot . t))

  Type C-c C-v e  org-babel-execute-maybe to see what this plot produces
  #+BEGIN_SRC gnuplot
    plot 'data' with boxes, sin(x) with lines
  #+END_SRC

  #+RESULTS:

** org invoice

  #+BEGIN_SRC emacs-lisp
    (require 'org-invoice)
  #+END_SRC

  This lests you manage invoices with org-mode.  It is pretty cool!
  You can create invoices with the following format.  And just call org-invoice-report on the
  begin invoice.  Be careful NOT to put an inactive time stamp anywhere in the tree unless you want that
  parent to show up in the invoice.  ie: If you create a notes heading, don't have an inactive time stamp like
  <2015-09-02 Sat> because when you generate that invoice, Notes will show up in the invoice even though it
  has no time associated with it

 * Working for Waypoint

 #+BEGIN: invoice

  | Task / Date                   |  Time |  Price |
  |-------------------------------+-------+--------|
  | Wednesday, September 02, 2015 |  9:57 | 149.25 |
  | PCN HTML Design               |  9:57 | 149.25 |
  |-------------------------------+-------+--------|
  | Tuesday, August 18, 2015      |  3:19 |  49.75 |
  |                               |  3:19 |  49.75 |
  |-------------------------------+-------+--------|
  | Total:                        | 13:16 | 199.00 |
 #+END:

 ** PCN HTML Design
   :PROPERTIES:
   :RATE: 15
   :END:
   :LOGBOOK:
   CLOCK: [2015-10-16 Fri 14:49]--[2015-10-16 Fri 14:51] =>  0:02
   CLOCK: [2015-10-16 Fri 09:47]--[2015-10-16 Fri 12:34] =>  2:47
   CLOCK: [2015-10-15 Thu 17:32]--[2015-10-15 Thu 18:03] =>  0:31
   CLOCK: [2015-10-15 Thu 17:14]--[2015-10-15 Thu 17:26] =>  0:12
   CLOCK: [2015-10-15 Thu 16:24]--[2015-10-15 Thu 16:37] =>  0:13
   CLOCK: [2015-10-15 Thu 15:42]--[2015-10-15 Thu 15:57] =>  0:15
   CLOCK: [2015-10-15 Thu 14:47]--[2015-10-15 Thu 15:26] =>  0:39
   CLOCK: [2015-10-15 Thu 14:34]--[2015-10-15 Thu 14:42] =>  0:08
   CLOCK: [2015-10-15 Thu 13:26]--[2015-10-15 Thu 14:09] =>  0:43
   CLOCK: [2015-10-15 Thu 13:09]--[2015-10-15 Thu 13:17] =>  0:08
   CLOCK: [2015-10-15 Thu 11:16]--[2015-10-15 Thu 11:59] =>  0:43
   CLOCK: [2015-10-15 Thu 11:10]--[2015-10-15 Thu 11:12] =>  0:02
   CLOCK: [2015-10-14 Wed 14:49]--[2015-10-14 Wed 15:06] =>  0:17
   CLOCK: [2015-10-14 Wed 14:38]--[2015-10-14 Wed 14:49] =>  0:11
   CLOCK: [2015-10-14 Wed 11:39]--[2015-10-14 Wed 11:55] =>  0:16
   CLOCK: [2015-10-14 Wed 09:59]--[2015-10-14 Wed 10:01] =>  0:02
   CLOCK: [2015-10-14 Wed 09:05]--[2015-10-14 Wed 09:59] =>  0:54
   CLOCK: [2015-10-06 Tue 13:22]--[2015-10-06 Tue 13:50] =>  0:28
   CLOCK: [2015-10-06 Tue 11:34]--[2015-10-06 Tue 11:41] =>  0:07
   CLOCK: [2015-10-02 Fri 15:53]--[2015-10-02 Fri 16:20] =>  0:27
   CLOCK: [2015-10-02 Fri 13:21]--[2015-10-02 Fri 13:50] =>  0:29
   CLOCK: [2015-09-17 Thu 17:06]--[2015-09-17 Thu 17:29] =>  0:23
   :END:
   <2015-09-02 Sat>
 ** Client Bar (Jan 01 - Jan 15)
   :PROPERTIES:
   :RATE: 15
   :END:
   :LOGBOOK:
   CLOCK: [2015-10-16 Fri 14:49]--[2015-10-16 Fri 14:51] =>  0:02
   CLOCK: [2015-10-16 Fri 09:47]--[2015-10-16 Fri 12:34] =>  2:47
   CLOCK: [2015-10-15 Thu 17:32]--[2015-10-15 Thu 18:03] =>  0:31
   CLOCK: [2015-10-15 Thu 17:14]--[2015-10-15 Thu 17:26] =>  0:12
   CLOCK: [2015-10-15 Thu 16:24]--[2015-10-15 Thu 16:37] =>  0:13
   CLOCK: [2015-10-15 Thu 15:42]--[2015-10-15 Thu 15:57] =>  0:15
   CLOCK: [2015-10-15 Thu 14:47]--[2015-10-15 Thu 15:26] =>  0:39
   CLOCK: [2015-10-15 Thu 14:34]--[2015-10-15 Thu 14:42] =>  0:08
   CLOCK: [2015-10-15 Thu 13:26]--[2015-10-15 Thu 14:09] =>  0:43
   CLOCK: [2015-10-15 Thu 13:09]--[2015-10-15 Thu 13:17] =>  0:08
   CLOCK: [2015-10-15 Thu 11:16]--[2015-10-15 Thu 11:59] =>  0:43
   CLOCK: [2015-10-15 Thu 11:10]--[2015-10-15 Thu 11:12] =>  0:02
   CLOCK: [2015-10-14 Wed 14:49]--[2015-10-14 Wed 15:06] =>  0:17
   CLOCK: [2015-10-14 Wed 14:38]--[2015-10-14 Wed 14:49] =>  0:11
   CLOCK: [2015-10-14 Wed 11:39]--[2015-10-14 Wed 11:55] =>  0:16
   CLOCK: [2015-10-14 Wed 09:59]--[2015-10-14 Wed 10:01] =>  0:02
   CLOCK: [2015-10-14 Wed 09:05]--[2015-10-14 Wed 09:59] =>  0:54
   CLOCK: [2015-10-06 Tue 13:22]--[2015-10-06 Tue 13:50] =>  0:28
   CLOCK: [2015-10-06 Tue 11:34]--[2015-10-06 Tue 11:41] =>  0:07
   CLOCK: [2015-10-02 Fri 15:53]--[2015-10-02 Fri 16:20] =>  0:27
   CLOCK: [2015-10-02 Fri 13:21]--[2015-10-02 Fri 13:50] =>  0:29
   CLOCK: [2015-09-17 Thu 17:06]--[2015-09-17 Thu 17:29] =>  0:23
   :END:
   <2015-09-02 Sat>
** org-notify lets you know when you have upcoming appointments
  I would like to get this set up so that it shows pop-ups using a lua script.
  At the moment it only notifies you when you have approaching deadlines.
  #+BEGIN_SRC emacs-lisp

    (require 'org-notify)
    (org-notify-start)

    (org-notify-add 'appt
                    '(:time "-1s" :period "20s" :duration 10
                            :actions (-message -ding))
                    '(:time "15m" :period "2m" :duration 100
                            :actions -notify)
                    '(:time "2h" :period "5m" :actions -message)
                    '(:time "3d" :actions -email))
  #+END_SRC
** org-google-wheather
   I really want to get this set up at some point
   https://julien.danjou.info/projects/emacs-packages#google-weather
   (require 'org-google-weather)
** org-inlinetask
   Org inline task lets you define an inline task without treating it like a headline
   #+BEGIN_SRC emacs-lisp
     (require 'org-inlinetask)
   #+END_SRC

   Suppose you have something like this where point is at point:

   #+BEGIN_SRC org
           - [X] Call the farmer about buying his cows

                 POINT

                 I let him know that his cows were all rather nice and left a voicemail.  If he does not get back to me,
                 Then I'll have to call him again


           - [ ] call your momma
             Let her know she's a good Mom
   #+END_SRC

   Pressing C-c C-x t will insert an inline task like the one below

   #+BEGIN_SRC org
           - [X] Call the farmer about buying his cows
     ,*************** Call Mark S. Davis today again about making his site better.  If he does not respond move on.
                     SCHEDULED: <2015-11-30 Mon>
     ,*************** END
                 I let him know that his cows were all rather nice and left a voicemail.  If he does not get back to me,
                 Then I'll have to call him again


           - [ ] call your momma
             Let her know she's a good Mom
   #+END_SRC
** org-habit
   Org habit is a nice way to let you know how well you are doing on your habits.  It shows you a nice
   little color graph in your agenda view.  It is kind of cool.
   #+BEGIN_SRC emacs-lisp
   (require 'org-habit)
   #+END_SRC
* My org-mode preferences
** A big setq

  #+BEGIN_SRC emacs-lisp
    (setq
     ;; hide the leading stars in my org files
     org-hide-leading-stars t
     ;;seeing the ... that org mode does to how you that the heading continues in the text beneith it is kind of boring
     ;; http://endlessparentheses.com/changing-the-org-mode-ellipsis.html?source=rss
     ;; Other interesting characters are ↴, ⬎, ⤷, and ⋱.
     org-ellipsis " ↴"
     ;;org-ellipsis "⬎"
     ;; org-ellipsis "⤵"
     ;; don't let me accidentally delete text without realizing it in org.  ie: point is buried in a subtree, but you only
     ;; see the heading and you accidentally kill a line without knowing it.
     ;; this might not be supported for evil-mode
     org-catch-invisible-edits 'show-and-error
     ;; whenever I change state from TODO to DONE org will log that timestamp. Let's put that in a drawer
     org-log-into-drawer t
     ;; make org-mode record the date when you finish a task
     org-log-done 'time
     ;;org-log-done 'nil
     ;; when you press S-down, org changes the timestamp under point
     org-edit-timestamp-down-means-later t
     ;; make the agenda start on today not wednesday
     org-agenda-start-on-weekday nil
     ;; don't make the agenda only show saturday and Sunday if today is saturday. Make it show 7 days
     org-agenda-span 7
     ;; using the diary slows down the agenda view
     ;; but it also shows you upcoming calendar events
     org-agenda-include-diary t
     ;; this tells the agenda to take up the whole window and hide all other buffers
     org-agenda-window-setup 'current-window
     ;; this tells org-mode to only quit selecting tags for things when you tell it that you are done with it
     org-fast-tag-selection-single-key nil
     org-html-validation-link nil
     org-export-kill-product-buffer-when-displayed t
     ;; are there more backends that I can use?
     org-export-backends '(ascii beamer html texinfo latex)
     ;;most of these modules let you store links to various stuff in org
     org-bullets-bullet-list
     '("◉" "◎" "♠" "○" "►" "◇")
     org-modules '(org-bbdb org-gnus org-info org-invoice man org-toc org-habit org-mime org-crypt org-bullets)
     ;; load in the org-modules
     ;;org-load-modules-maybe t
     ;; where to put the :action: or :work: tag after a heading.  80 colums over
     org-tags-column 80
     ;; don't ask me if I want to run an babel code block.  I know what I'm doing
     org-confirm-babel-evaluate nil
     ;; activate org speed commands
     org-use-speed-commands t)

    ;;a visual hint to let you know what line you are in in org-mode agenda
    (add-hook 'org-agenda-finalize-hook (lambda () (hl-line-mode)))
  #+END_SRC

** my org capure templates
  This is SOOOO USEFUL!!!! Org capture lets you quickly jot down a thought that you have and place it in a file under
  a heading that you specify.  I have captchas for shopping, for books to read, for things to do.

  #+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
      '(

        ("B" "Things I want to buy" entry (file+headline
        "~/programming/org/gtd/projects/managing-my-monies.org" "things I want to buy")
         "* %?\nEntered on %U\n  %i\n  %a")

        ("c" "Computers Anything")
        ("ca" "Awesome WM" entry (file+headline "~/programming/org/gtd/gtd.org" "awesome WM someday")
         "* TODO %?\nEntered on %U\n  %i\n  %a")
        ("ce" "emacs Todo" entry (file+headline "~/programming/org/gtd/projects/become-an-awesome-hacker.org" "emacs someday")
         "* TODO %?\n  %i\n  %a")
        ("cE" "Emacs Reference" entry (file+headline "~/programming/org/gtd/projects/become-an-awesome-hacker.org" "emacs reference")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("cG" "Gimp Basics Reference" entry (file+headline "~/manuals/gimp.org" "Basic Concepts")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("cH" "The GNU HURD")
        ("cHt" "Hurd" entry (file+headline "~/programming/org/gtd/projects/become-an-awesome-hacker.org"
                                                                       "Hurd")
         "* TODO %?\n  %i\n  %a")
        ("ct" "General Computer TODO"
         entry (file+headline "~/programming/org/gtd/projects/become-an-awesome-hacker.org" "General TODO")
         "* TODO %?\n  %i\n  %a")
        ("cw" "Waypoint")
        ("cwi" "ibca Web App")
        ("cwib" "bugs that need fixin'" entry (file+headline "~/programming/org/gtd/projects/working-for-waypoint.org"
                                                                       "bugs that need fixin'")
         "* TODO %?\n  %i\n  %a")
        ("cwic" "core features that must be done" entry (file+headline "~/programming/org/gtd/projects/working-for-waypoint.org"
                                                                       "core features that must be done")
         "* TODO %?\n  %i\n  %a")
        ("cwif" "features the app should have" entry (file+headline "~/programming/org/gtd/projects/working-for-waypoint.org"
                                                                    "features the app should have") "* TODO %?\n  %i\n  %a")
        ("cwir" "IBCA Reference" entry (file+headline "~/programming/org/gtd/projects/working-for-waypoint.org"
                                                      "IBCA Reference") "* %?\nEntered on %U\n  %i\n  %a")
        ("cwiw" "what I have done" entry (file+headline "~/programming/org/gtd/projects/working-for-waypoint.org"
                                                                 "what I have done") "* DONE %?\n  %i\n  %a")
        ("ch" "high star todo"
         entry (file+headline "~/programming/org/gtd/projects/become-an-awesome-hacker.org" "make high star an android app")
         "* todo %?\n  %i\n  %a")
        ("cl" "linux TODO" entry (file+headline "~/programming/org/gtd/projects/become-an-awesome-hacker.org" "linux someday")
         "* TODO %?\n  %i\n  %a")
        ("cL" "Linux Reference" entry (file+headline "~/programming/org/gtd/projects/become-an-awesome-hacker.org" "linux reference")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("co" "organ TODO" entry (file+headline "~/programming/org/gtd/projects/become-an-awesome-hacker.org" "make organ an android app")
         "* TODO %?\n  %i\n  %a")
        ("cf" "Free the world" entry (file+headline "~/programming/org/gtd/gtd.org" "free the world free content")
         "* %?\nEntered on %U\n  %i\n  %a")

         ("cW" "Web")

        ("cWA" "Accrisoft Reference" entry (file+headline "~/programming/org/gtd/web.org" "Accrisoft reference")
         "* %?\nEntered on %U\n  %i\n  %a")

         ("cWB" "Bootstrap Reference" entry (file+headline "~/programming/org/gtd/web.org" "Bootstrap reference")
         "* %?\nEntered on %U\n  %i\n  %a")

         ("cWS" "Shoppify Reference" entry (file+headline "~/programming/org/gtd/web.org" "Shoppify reference")
         "* %?\nEntered on %U\n  %i\n  %a")

         ("cWW" "Web reference" entry (file+headline "~/programming/org/gtd/web.org" "Web reference")
         "* %?\nEntered on %U\n  %i\n  %a")


        ("C" "Community")
        ("Cc" "community TODO" entry (file+headline "~/programming/org/gtd/gtd.org" "community someday")
         "* TODO %?\n  %i\n  %a")

         ("Cn" "nice things to say" entry (file+headline "~/programming/org/gtd/projects/get-close-to-God.org" "nice things to say")
         "* TODO %?\nEntered on %U\n  %i\n  %a")
        ("Cs" "Social Skills Notes" entry (file+headline "~/programming/org/gtd/being-social.org" "Social Skills Notes")
         "* %?\nEntered on %U\n  %i\n  %a")

        ("C" "Calendar TODO" entry (file+headline "~/programming/org/gtd/gtd.org" "calendar")
         "* TODO %?\n  %i\n  %a")

        ("e" "entertainment")
        ("eb" "Books to Read" entry (file+headline "~/programming/org/gtd/projects/whatever-I-want.org" "Books to Read")
         "*  %i\n  %a")
        ("eM" "Good Movies Reference" entry (file+headline "~/programming/org/gtd/projects/whatever-I-want.org" "Good Movies")
         "*  %i\n  %a")
        ("em" "movies to watch" entry (file+headline "~/programming/org/gtd/projects/whatever-I-want.org" "movies to watch")
         "*  %i\n  %a")
        ("g" "getting close to God")
        ("gg" "get a close friend" entry (file+headline "/home/joshua/programming/org/gtd/projects/get-close-to-God.org"
                                                        "get a close friend") "* TODO %?\n  %i\n  %a")
        ("gb" "Boundaries")
        ("gbn" "Boundary Notes" entry (file+headline "~/programming/org/gtd/gtd.org" "Boundary Notes")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("gbl" "Lowering My Expectations of Myself" entry (file+headline "~/programming/org/gtd/gtd.org"
                                                                         "Lowering My Expectations of Myself")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("gbs" "Boundaries To Enforce" entry (file+headline "~/programming/org/gtd/projects/get-close-to-God.org" "Setting Boundaries")
         "* TODO %?\n  %i\n  %a")



        ("M" "Math")
        ("Mf" "fun math problems" entry (file+headline "/home/joshua/programming/org/gtd/projects/math.org" "fun math problems") "* TODO %?\n  %i\n  %a")
        ("p" "payless TODO" entry (file+headline "~/programming/org/gtd/gtd.org" "shopping todo")
         "* TODO %?\n  %i\n  %a")
        ("r" "Reference" entry (file+headline "~/programming/org/gtd/gtd.org" "general reference")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("t" "TODO" entry (file+headline "~/programming/org/gtd/gtd.org" "general todo")
         "* TODO %?\nEntered on %U\n  %i\n  %a")
        ("q" "Quotations" entry (file+headline "~/programming/org/quotes.org" "Quotations")
         "* %?\nEntered on %U\n  %i\n  %a")
        ))
  #+END_SRC

** Agenda Configuration
*** Agenda icons via Category
   You can easily create custom icons to show up in your agenda next to your specific tasks. My icons are all about
   30 by 30 px.
   #+BEGIN_SRC emacs-lisp
    (setq org-agenda-category-icon-alist '(
                                      ("hacker"      "/home/joshua/pictures/org-icons/gnu-linux-icon.png" nil nil nil nil)
                                      ("MAKING CASH"   "/home/joshua/pictures/org-icons/money.png" nil nil nil nil)
                                      ("SEEKING GOD" "/home/joshua/pictures/org-icons/god.png" nil nil nil nil)
                                      ("BILLS"    "/home/joshua/pictures/org-icons/bills.png" nil nil nil nil)
                                      ("emacs"       "/home/joshua/pictures/org-icons/emacs.png" nil nil nil nil)
                                      ("WORK"       "/home/joshua/pictures/org-icons/work.png" nil nil nil nil)
                                      ))
   #+END_SRC
*** I generate my org-agenda-files and org-refile-targets
  Org-agenda-files are a list of files where you store your TODOs.  These are your things that need to be done, scheduled items,
  deadlines, recurring items, etc.  Then pressing "C-c a a" lets you build your agenda from all of your agenda files.  It is very
  useful. But it would be a pain to have to manually enter all of your agenda files.  So I've got some code here that I found online
  that lets me generate my agenda files.

  Org-refile-targets are a list of files and possibly headings in any org file that you can at any time jump to move pits of an
  org file to.  So let's say you're in weekly schedule.org, BUT you wish to quickly jump to shopping.org at the heading
  "Groceries",  you can very easily do that.

  EDIT:  I'm not really sure if this code is worth it.  The command org-agenda-files already stores your agenda files,  and I think that my custom.el file already keeps track of my agenda files.  Furthermore, (org-agenda-file-to-front) bound to "C-c [" is a nice way to keep track of agenda files.

  #+BEGIN_SRC emacs-lisp

(defun my-org-list-files (dirs ext)
  "Function to create list of org files in multiple subdirectories.
This can be called to generate a list of files for
org-agenda-files or org-refile-targets.

DIRS is a list of directories.

EXT is a list of the extensions of files to be included."
  (let ((dirs (if (listp dirs)
                  dirs
                (list dirs)))
        (ext (if (listp ext)
                 ext
               (list ext)))
        files)
    (mapc
     (lambda (x)
       (mapc
        (lambda (y)
          (setq files
                (append files
                        (file-expand-wildcards
                         (concat (file-name-as-directory x) "*" y)))))
        ext))
     dirs)
    (mapc
     (lambda (x)
       (when (or (string-match "/.#" x)
                 (string-match "#$" x))
         (setq files (delete x files))))
     files)
    files))


(defvar my-org-agenda-directories '("~/programming/org/")
  "List of directories containing org files.")
(defvar my-org-agenda-extensions '(".org")
  "List of extensions of agenda files")

(setq my-org-agenda-directories '("~/programming/org/" "~/programming/org/gtd/"
                                  "~/programming/org/gtd/projects"))
(setq my-org-agenda-extensions '(".org"))

(defun my-org-set-agenda-files ()
  (interactive)
  (setq org-agenda-files (my-org-list-files
                          my-org-agenda-directories
                          my-org-agenda-extensions)
        ;;org-refile-targets (my-org-list-files
          ;;                  my-org-agenda-directories
            ;;                my-org-agenda-extensions
                          ;;  )
        ))

(my-org-set-agenda-files)

  #+END_SRC

  Refile targets include this file and any file contributing to the agenda - up to 5 levels deep  But unfortunately, I cannot
  get org-refile to work.


  You absolutely want org-refile targets!!! Trust me on this!!!  You can very quickly jot down your todo list in org,
  in no particular order, then when your list is done, you can quickly refile your agenda files very quickly.  This works awesomeingly with helm-mode.


  This was some crusty code that I'm not sure if I need to keep to get refile targets to work.

  ;; (setq org-completion-use-ido nil)
  ;; (setq org-refile-allow-creating-parent-nodes t)

  #+BEGIN_SRC emacs-lisp
    (setq org-refile-targets '((nil :maxlevel . 2)
                               (org-agenda-files :tag . "capture")
                               (org-agenda-files :maxlevel . 2)))
    (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
    (setq org-refile-use-outline-path t)                  ; Show full paths for refiling
  #+END_SRC

*** My custom agenda commands
    Any commands that I make here are accessable with C-c a <key>

    #+BEGIN_SRC emacs-lisp
      (setq org-agenda-custom-commands
            '(
              ;; a global search for agenda entries planned this week/day
              ("x" agenda)

              ;; a global search for agenda entries planned this week/day, but
              ;;only those with hour specifications
              ("y" agenda*)

              ;; a global searcher with "WAITING" as the TODO keywoard
              ;; but I don't use waiting as a keyword
              ;; ("w" todo "WAITING")
              ;; ("w" todo "WAITING")

              ("D" todo "⚑ DELEGATED" )

              ;; the same search bit with searching for projects
              ("P" todo "♇ PROJECT")


              ("S" todo "STARTED" )

              ("c" todo "☺ CHARGED")

              ;; the same search but only in the current buffer and displaying the
              ;; results as a sparse tree
              ("W" todo-tree "WAITING")

              ;; a global search for headlines marked :boss: bot not :urgent:
              ("u" tags "+boss-urgent")

              ;; The same search but limiting the search to items that are TODO items
              ("v" tags-todo "+boss-urgent")

              ;; the same search as C-c a u but only in the current buffer displaying
              ;; the results in a sparse tree
              ("U" tags-tree "+boss-urgent")

              ;; Create a sparse tree in the current buffer with all entries containing
              ;;the word FIXME
              ("f" occur-tree "\\<FIXME\\>")

              ;;
              ;; ("h" . "HOME+Name tags searches") ; description for "h" prefix
              ;; ("hl" tags "+home+Lisa")
              ;; ("hp" tags "+home+Peter")
              ;; ("hk" tags "+home+Kim")


            ;; ("H" "Office and Home Lists"
            ;; ((agenda)
            ;; (tags-todo "OFFICE")
            ;; (tags-todo "HOME")
            ;; (tags-todo "COMPUTER")
            ;; (tags-todo "DVD")
            ;; (tags-todo "READING")))
              )
            )
    #+END_SRC
** I can make add words to the TODO and DONE keywords
  #+BEGIN_SRC emacs-lisp
  ; Targets start with the file name - allows creating level 1 tasks
    (setq org-refile-use-outline-path (quote file))
  #+END_SRC


  I can specify that when I use org-refile that I want to be able to refile an entry by being shown an indirect buffer of an org-mode
  file, that initially hides all of the sub headings.  I can refile by tabbing to various subtrees and then via pressing enter.
  #+BEGIN_SRC emacs-lisp
    ; Targets complete in steps so we start with filename, TAB shows the next level of targets etc
    (setq org-outline-path-complete-in-steps t)
  #+END_SRC

  I want to make specific TODO states.  Anything after the "|" is marked completed and appears green.  Anything before it, shows
  that the item is still actionable and it is red.

  I should also point out, that most people will probably want TODO to be the first keyword.  Suppose that you have a recurring
  task like the following:

  #+BEGIN_SRC org
    ,* TODO Brush my teeth
      SCHEDULED: <2015-11-15 Sun +1d>
      :LOGBOOK:
      - State "TODO"       from              [2015-11-15 Sun 09:24]
      :END:
  #+END_SRC

  Whenever you complete this task, and do a C-c C-t (org-todo), org will put a short message inside a drawer under the item.
  Then, since this item is not properly DONE (since it still repeats), org-mode will try to find the proper TODO state to put in.
  By default, org-mode uses the first keyword specified by org-todo-keywords.  So most users will probably want to make TODO
  the first keyword.

  Also the TODO(t!), means that "t" will be used as the quick key for this TODO entry in the todo pop up dialog.  The "!" means to
  only record the time of the state change. You can also use a "@" instead of "!" to specify that you would like to enter a note
  when you change the item's state.  So "DONE(d@)" means that you want to use d as the shortcut key, and you'd org-mode to prompt
  you for a not when you do so.

  You can also have syntax like "PROJECT(p@/!)", which means to record a note when you change an items TODO keyword to project,
  and you'd like to only record a timestamp if that item's keyword ever changes to any other todo keyword.

  Apparently I can define a NEXTACTION keyword too. http://thread.gmane.org/gmane.emacs.orgmode/523

  #+BEGIN_SRC emacs-lisp
    (setq org-todo-keywords
    '((sequence "☛ TODO(t!)" "♇ PROJECT(r)" "STARTED(s!)"  "⚑ DELEGATED(e!)" "☺ CHARGED(c!)" "|" "$ PAID(p!)" "✔ DONE(d!)")))

    ;; I'm not sure how to globally set tags.  I would like to know how to do that, so I won't have to specify all the tags
    ;; the top of each agenda document
    ;; I can apparently also specify org-tag-faces which will make certain tags look certain colors!
    ;; why is this big hunk of setq not working?
    ;; (setq org-tag-alist '(("waiting(w)" . ?w)
    ;; ("action(a)" . ?a) ("career" . ?r) ("community" . ?m) ("gnu" . ?g)
    ;; ("someday" . ?o) ("project" . ?p) ("reference" . ?e) ("reward" . ?d))

    ;; org-tag-faces '(("waiting(w)" . org-warning) ("action(a)" . org-warning)
    ;;  ("career" . "green") ("community" . "green") ("gnu" . "green") ("someday" . "yellow")
    ;;  ("project" . "blue") ("reference" . "green") ("reward" . "green")))


    ;;  (setq org-todo-keywords
    ;;        (quote ((sequence "TODO(t)" "STARTED(s)" "|" "DONE(d!/!)")
    ;;                (sequence "WAITING(w@/!)" "SOMEDAY(S)" "|" "CANCELLED(c@/!)"))))

    ;;(setq org-todo-keyword-faces
      ;;     '(("TODO" . org-warning) ("STARTED" . "yellow")
        ;;     ("CANCELED" . (:foreground "blue" :weight bold))))
  #+END_SRC

** Org Clock Settings
  #+BEGIN_SRC emacs-lisp

;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persistence-insinuate t)
(setq org-clock-persist t)
(setq org-clock-in-resume t)

;; Change task state to STARTED when clocking in
(setq org-clock-in-switch-to-state "STARTED")
;; Save clock data and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
;; Removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)

;; Show clock sums as hours and minutes, not "n days" etc.
(setq org-time-clocksum-format
      '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))

;; Show the clocked-in task - if any - in the header line
(defun sanityinc/show-org-clock-in-header-line ()
  (setq-default header-line-format '((" " org-mode-line-string " "))))

(defun sanityinc/hide-org-clock-from-header-line ()
  (setq-default header-line-format nil))

(add-hook 'org-clock-in-hook #'sanityinc/show-org-clock-in-header-line)
(add-hook 'org-clock-out-hook #'sanityinc/hide-org-clock-from-header-line)
(add-hook 'org-clock-cancel-hook #'sanityinc/hide-org-clock-from-header-line)

(after-load 'org-clock
  (define-key org-clock-mode-line-map [header-line mouse-2] #'org-clock-goto)
  (define-key org-clock-mode-line-map [header-line mouse-1] #'org-clock-menu))

;;you can start clocking in on an event in the agenda buffer by pressing P
(use-package org-pomodoro
  :ensure t)
(after-load 'org-agenda
  (define-key org-agenda-mode-map (kbd "P") 'org-pomodoro))
  #+END_SRC

** customizing stuck projects
** COMMENT easy templates
Easy templates are a way that org mode allows you to define templates.  For example

=<c= expands into

#+BEGIN_SRC org
  ,#+BEGIN_CENTER

  ,#+END_CENTER
#+END_SRC

But I want to be able to customize this list to include all of the org babel languages.
ie: but this is not currently working

#+BEGIN_SRC emacs-lisp
 ;; (add-to-list org-structure-template-alist '(("js" "#+BEGIN_SRC js\n?\n ,#+END_SRC")))
#+END_SRC


(print org-structure-template-alist )

* My Org-mode-hook
Org-mode does not play well with yasnippet.  So this function that I got here [[info:org#Conflicts][info:org#Conflicts]] should help
with making yasnippet play well with org-mode.  It seems to 1st make TAB try to do any org expanding, then it'll
try to expand a yasnippet.

#+BEGIN_SRC emacs-lisp
(defun yas/org-very-safe-expand ()
    (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
#+END_SRC

#+RESULTS:
: yas/org-very-safe-expand

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook '(lambda ()

                                ;; https://bitbucket.org/ukaszg/org-eldoc org eldoc looks cool
                                (require 'org-eldoc)
                                ;;(org-eldoc-load)
                                (make-variable-buffer-local 'yas/trigger-key)
                                (setq yas/trigger-key [tab])
                                (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
                                (define-key yas/keymap [tab] 'yas/next-field)
                                ;; make the lines in the buffer wrap around the edges of the screen.
                                ;; YES!!!!! These next two modes auto-indents org-buffers as you type!  NO NEED FOR
                                ;; to press C-c q  or fill-paragraph ever again!
                                (visual-line-mode)
                                (org-indent-mode)
                                ;; apparently this does the same thing as the above combined modes
                                ;; (toggle-word-wrap)
                                (org-bullets-mode 1)
                                ;;make ">=" look like >=, etc.
                                (push '(">=" . ?≥) prettify-symbols-alist)
                                (push '("<=" . ?≤) prettify-symbols-alist)
                                (push '("\\geq" . ?≥) prettify-symbols-alist)
                                (push '("\\leq" . ?≤) prettify-symbols-alist)
                                (push '("\\neg" . ?¬) prettify-symbols-alist)
                                (push '("\\rightarrow" . ?→) prettify-symbols-alist)
                                (push '("\\leftarrow" . ?←) prettify-symbols-alist)
                                (push '("\\infty" . ?∞) prettify-symbols-alist)
                                (push '("-->" . ?→) prettify-symbols-alist)
                                (push '("<--" . ?←) prettify-symbols-alist)
                                (push '("\\exists" . ?∃) prettify-symbols-alist)
                                (push '("\\nexists" . ?∄) prettify-symbols-alist)
                                (push '("\\forall" . ?∀) prettify-symbols-alist)
                                (push '("\\or" . ?∨) prettify-symbols-alist)
                                (push '("\\and" . ?∧) prettify-symbols-alist)
                                (push '(":)" . ?☺) prettify-symbols-alist)
                                (push '("):" . ?☹) prettify-symbols-alist)
                                (push '(":D" . ?☺) prettify-symbols-alist)
                                (push '("\\checkmark" . ?✓) prettify-symbols-alist)
                                (push '("\\check" . ?✓) prettify-symbols-alist)
                                (push '("1/4" . ?¼) prettify-symbols-alist)
                                (push '("1/2" . ?½) prettify-symbols-alist)
                                (push '("3/4" . ?¾) prettify-symbols-alist)
                                (push '("1/7" . ?⅐) prettify-symbols-alist)
                                ;; ⅕ ⅖ ⅗ ⅘ ⅙ ⅚ ⅛ ⅜ ⅝ ⅞
                                (push '("ae" . ?æ) prettify-symbols-alist)
                                (push '("^_^" . ?☻) prettify-symbols-alist)))
#+END_SRC

* customize org-stuck projects
  C-c a # will list all of your stuck projects.  According to David Allen's Getting Things Done productivity system,
  a stuck project [fn:1] is one where the next action is not defined.  That is, your project does not have any next actions.  No one
  knows what the next step to do is for the project.

  Anyway, org-stuck-projects helps you to identify where your projects are.   It is a list with 4 entries:
  - A tags/todo/propery that identifies this heading as a project
  - A list of todo keywords that show that this project is NOT stuck.  If any of these todo keywords show up under the projects'
    tree, then that project is not stuck
  - A list of tags identifying non-stuck projects
  - A regexp matching non-stuck projects

  #+BEGIN_SRC emacs-lisp
  (setq org-stuck-projects '("PROJECT" ("TODO NEXT") ("action") "\\<IGNORE\\>" ))
  #+END_SRC

* misc
  A lot of this is code that I didn't wrote and don't use. But I keep it because I might one day.
** a hydra that I found online that lets you easily remember some of the org commands
  this is not working?
  we want to remember the org keyboard navigation commands eh?
  https://github.com/abo-abo/hydra/wiki/Emacs
  #+BEGIN_SRC emacs-lisp

(defhydra hydra-outline (:color pink :hint nil)
  "
^Hide^             ^Show^           ^Move
^^^^^^------------------------------------------------------
_hs_: sublevels     _sa_: all         _u_: up
_hb_: body          _se_: entry       _n_: next visible
_ho_: other         _sc_: children    _p_: previous visible
_he_: entry         _sb_: branches    _f_: forward same level
_hl_: leaves        _st_: subtree     _b_: backward same level
_ht_: subtree

"
  ;; Hide
  ("hs" hide-sublevels)    ; Hide everything but the top-level headings
  ("hb" hide-body)         ; Hide everything but headings (all body lines)
  ("ho" hide-other)        ; Hide other branches
  ("he" hide-entry)        ; Hide this entry's body
  ("hl" hide-leaves)       ; Hide body lines in this entry and sub-entries
  ("ht" hide-subtree)      ; Hide everything in this entry and sub-entries
  ;; Show
  ("sa" show-all)          ; Show (expand) everything
  ("se" show-entry)        ; Show this heading's body
  ("sc" show-children)     ; Show this heading's immediate child sub-headings
  ("sb" show-branches)     ; Show all sub-headings under this heading
  ("st" show-subtree)      ; Show (expand) everything in this heading & below
  ;; Move
  ("u" outline-up-heading)                ; Up
  ("n" outline-next-visible-heading)      ; Next
  ("p" outline-previous-visible-heading)  ; Previous
  ("f" outline-forward-same-level)        ; Forward - same level
  ("b" outline-backward-same-level)       ; Backward - same level

  ("z" nil "leave"))

(define-key org-mode-map (kbd "C-c #") 'hydra-outline/body) ; by example
(global-set-key (kbd "C-c #") 'hydra-outline/body)
  #+END_SRC

** A definition I found online org-begin-template
  I should really check this out at some point http://pragmaticemacs.com/emacs/wrap-text-in-an-org-mode-block/ In my most recent
  post on org-mode, I talked about using blocks to mark text as being latex, or source code and so on. I mentioned using the
  shortcuts like <e then TAB on a new line to create an empty block. Sometimes it is handy to wrap existing text in a block, and
  the following function does that for the text you have selected.

  This has been in my config file for ages and I can’t remember where it came from – I know I didn’t write it! A bit of googleing
  suggests this could be the origin, but if anyone knows different, let me know.

  I bind the function to C-< because it reminds me of the < shortcuts to create the blocks, and I don’t use the
  org-cycle-agenda-files that is usually bound to that key combo.

  #+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; function to wrap blocks of text in org templates                       ;;
  ;; e.g. latex or src etc                                                  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defun org-begin-template ()
  "Make a template at point."
  (interactive)
  (if (org-at-table-p)
      (call-interactively 'org-table-rotate-recalc-marks)
    (let* ((choices '(("s" . "SRC")
                      ("e" . "EXAMPLE")
                      ("q" . "QUOTE")
                      ("v" . "VERSE")
                      ("c" . "CENTER")
                      ("l" . "LaTeX")
                      ("h" . "HTML")
                      ("a" . "ASCII")))
           (key
            (key-description
             (vector
              (read-key
               (concat (propertize "Template type: " 'face 'minibuffer-prompt)
                       (mapconcat (lambda (choice)
                                    (concat (propertize (car choice) 'face 'font-lock-type-face)
                                            ": "
                                            (cdr choice)))
                                  choices
                                  ", ")))))))
      (let ((result (assoc key choices)))
        (when result
          (let ((choice (cdr result)))
            (cond
             ((region-active-p)
              (let ((start (region-beginning))
                    (end (region-end)))
                (goto-char end)
                (insert "#+END_" choice "\n")
                (goto-char start)
                (insert "#+BEGIN_" choice "\n")))
             (t
              (insert "#+BEGIN_" choice "\n")
              (save-excursion (insert "#+END_" choice))))))))))

;;bind to key
;;(define-key org-mode-map (kbd "C-<") 'org-begin-template)

#+END_SRC

** to load this file do org-babel-load-file and it'll pop up helm and you'll have to say that you want
  to load this file.  All the scripts in this file will be exported and saved into init-org.el.  Then
  that file will be loaded.

* provide this file
  #+BEGIN_SRC emacs-lisp
    (provide 'init-org)
  #+END_SRC

* Footnotes

[fn:1]  A project is an action that has multiple sequential steps.
